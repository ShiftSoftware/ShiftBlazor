@page "/"
@using ShiftBlazor.Tests.Viewer.Components.ShiftList
@using ShiftBlazor.Tests.Viewer.Components.ShiftFormBasic

<MudLayout>
    <MudAppBar Elevation="0">
        <MudText Typo="Typo.h6">@SelectedType?.Name</MudText>
        <MudSpacer />
    </MudAppBar>
    <MudDrawer Open="@DrawerOpen" DisableOverlay="true" Variant="DrawerVariant.Responsive" ClipMode="DrawerClipMode.Always" Breakpoint="Breakpoint.Sm">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">Components</MudText>
        </MudDrawerHeader>
        <MudList>
            @foreach (var groups in Components)
            {
                <MudListItem Style="cursor: pointer;" Text="@groups.Key!.Split('.').Last()">
                    <NestedList>
                        @foreach (var type in groups)
                        {
                            <MudListItem Style="cursor: pointer;" OnClick="@(() => SelectedType = type)" @key="type.Name" Text="@type.Name"/>
                        }
                    </NestedList>
                </MudListItem>
            }
        </MudList>
    </MudDrawer>

    <MudMainContent Class="mt-4">

        <MudPaper Elevation="0" Style="padding: 24px; margin: 24px;">
            @if (SelectedType == null)
            {
                <span>Select a component</span>
            }
            else
            {
                <DynamicComponent Type="SelectedType"></DynamicComponent>
            }
        </MudPaper>

    </MudMainContent>
</MudLayout>

@code {
    IEnumerable<IGrouping<string?, Type>> Components = typeof(Program)
            .Assembly
            .GetTypes()
            .Where(types => !types.Name.Contains("<"))
            .Where(types => types.FullName?.StartsWith("ShiftBlazor.Tests.Viewer.Components") == true)
            .GroupBy(components => components.Namespace);

    Type? SelectedType;

    bool DrawerOpen = true;
}