@namespace ShiftSoftware.ShiftBlazor.Components

@if (!string.IsNullOrWhiteSpace(Title) && !IsEmbed)
{
    <PageTitle>@Title</PageTitle>
}

<MudPaper Elevation="25" Outlined="Outlined" id="@FileExplorerId">
    <MudToolBar Style="@ToolbarStyle" Dense="@Dense" Class="light-toolbar shift-toolbar-header">
        <MudIcon Size="@IconSize" Icon="@IconSvg"></MudIcon>
        <MudText Class="px-4" Style="margin:0;">@(Title ?? Loc["FileExplorer"])</MudText>

        <MudSpacer></MudSpacer>

        @if (DisplayNewFolderButton)
        {
            <MudTooltip Text="@Loc["NewFolder"]">
                <MudButtonExtended StartIcon="@Icons.Material.Filled.CreateNewFolder"
                                   KeyboardKey="KeyboardKeys.KeyN"
                                   style="text-transform: capitalize;"
                                   Size="@IconSize"
                                   Color="NavIconFlatColor ? Color.Inherit : Color.Default"
                                   aria-label="@Loc["NewFolder"]"
                                   OnClick="CreateNewFolder" >
                    @Loc["New Folder"]
                </MudButtonExtended>
            </MudTooltip>
        }

        @if (DisplayUploadButton)
        {
            <MudTooltip Text="@Loc["Upload"]">
                <MudButtonExtended StartIcon="@Icons.Material.Filled.UploadFile"
                                   KeyboardKey="KeyboardKeys.KeyU"
                                   style="text-transform: capitalize;"
                                   Size="@IconSize"
                                   Color="NavIconFlatColor ? Color.Inherit : Color.Default"
                                   aria-label="@Loc["Upload"]"
                                   OnClick="Upload">
                    @Loc["Upload"]
                </MudButtonExtended>

            </MudTooltip>
        }

        <MudTooltip Text="@Loc["Sort"]">
            <MudButtonExtended StartIcon="@Icons.Material.Filled.Sort"
                               KeyboardKey="KeyboardKeys.KeyS"
                               style="text-transform: capitalize;"
                               Size="@IconSize"
                               Color="NavIconFlatColor ? Color.Inherit : Color.Default"
                               aria-label="@Loc["Sort"]"
                               OnClick="Sort">
                @Loc["Sort"]
            </MudButtonExtended>
        </MudTooltip>

        <MudTooltip Text="@Loc["Refresh"]">
            <MudButtonExtended StartIcon="@Icons.Material.Filled.Refresh"
                               KeyboardKey="KeyboardKeys.KeyR"
                               style="text-transform: capitalize;"
                               Size="@IconSize"
                               Color="NavIconFlatColor ? Color.Inherit : Color.Default"
                               aria-label="@Loc["Refresh"]"
                               OnClick="() => Refresh(true)">
                @Loc["Refresh"]
            </MudButtonExtended>
        </MudTooltip>

        @if (DisplayDeleteButton)
        {
            <MudTooltip Text="@Loc["Delete"]">
                <MudButtonExtended StartIcon="@Icons.Material.Filled.Delete"
                                   KeyboardKey="KeyboardKeys.KeyD"
                                   style="text-transform: capitalize;"
                                   Size="@IconSize"
                                   Color="NavIconFlatColor ? Color.Inherit : Color.Default"
                                   aria-label="@Loc["Delete"]"
                                   OnClick="Delete">
                    @Loc["Delete"]
                </MudButtonExtended>
            </MudTooltip>
        }

        @if (DisplayDownloadButton)
        {
            <MudTooltip Text="@Loc["Download"]">
                <MudButtonExtended StartIcon="@Icons.Material.Filled.Download"
                                   style="text-transform: capitalize;"
                                   Size="@IconSize"
                                   Color="NavIconFlatColor ? Color.Inherit : Color.Default"
                                   aria-label="@Loc["Download"]"
                                   OnClick="() => Download()">
                    @Loc["Download"]
                </MudButtonExtended>
            </MudTooltip>
            }

        @if (DisplayQuickAccessButton)
        {
@*             <MudTooltip Text="@Loc["QuickAccess"]">
                <MudButtonExtended StartIcon="@Icons.Material.Filled.AddToDrive"
                                   style="text-transform: capitalize;"
                                   Size="@IconSize"
                                   Color="NavIconFlatColor ? Color.Inherit : Color.Default"
                                   aria-label="@Loc["QuickAccess"]"
                                   OnClick="() => AddToQuickAccess()">
                    @Loc["Quick Access"]
                </MudButtonExtended>
            </MudTooltip> *@
        }
        
        <MudTooltip Text="@Loc["ToggleDelete"]">
            <MudButtonExtended StartIcon="@Icons.Material.Filled.RestoreFromTrash"
                               KeyboardKey="KeyboardKeys.KeyT"
                               style="text-transform: capitalize;"
                               Size="@IconSize"
                               Color="NavIconFlatColor ? Color.Inherit : Color.Default"
                               aria-label="@Loc["ToggleDelete"]"
                               OnClick="ViewDeletedFiles">
                @Loc["Toggle Delete"]
            </MudButtonExtended>
        </MudTooltip>

        @if (DisplayRestoreButton)
        {
            <MudTooltip Text="@Loc["RestoreFile"]">
                <MudButtonExtended StartIcon="@Icons.Material.Filled.RestoreFromTrash"
                                   style="text-transform: capitalize;"
                                   Size="@IconSize"
                                   Color="NavIconFlatColor ? Color.Inherit : Color.Default"
                                   aria-label="@Loc["RestoreFile"]"
                                   OnClick="RestoreFile">
                    @Loc["Restore File"]
                </MudButtonExtended>
            </MudTooltip>
        }
    </MudToolBar>

    <div style="display: flex;">

        @if (RenderQuickAccess)
        {
            <div class="quick-access-items">
                @foreach (var item in QuickAccessFiles)
                {
                    <MudChip T="string" Size="Size.Small" OnClick="() => GoToPath(item)" OnClose="() => RemoveQuickAccessItem(item)">
                        @item.Split('/', StringSplitOptions.RemoveEmptyEntries).LastOrDefault()
                    </MudChip>
                }
            </div>

            <MudDivider Vertical="true" FlexItem="true" />
        }

        <div class="main-window" style="overflow: hidden; height: @Height;">
            <MudToolBar Dense Class="breadcrumb">

                @* <MudText>@(RootAliasName ?? "Root")</MudText> *@

                @for (var i = 0; i < PathParts.Count - 1; i++)
                {
                    var index = i;
                    var part = PathParts[i];
                    <MudButton Size="Size.Small" OnClick="() => OnBreadCrumbClick(index)">@part</MudButton>
                    <MudText>></MudText>
                }

                <MudButton Size="Size.Small" Disabled>@PathParts.Last()</MudButton>
            </MudToolBar>

            <MudDivider Style="flex-grow: initial;" />

            <div class="file-listing @GetViewClass()" @onclick="DeselectAllFiles" @oncontextmenu="ContextMenu" @oncontextmenu:preventDefault="DisplayContextMenu">

                @if (Files.Count > 0)
                {
                    @foreach (var file in UploadingFiles.Concat(Files))
                    {
                        <div @key="file.Path" title="@file.Name" class="file-explorer-item @(SelectedFiles.Any(x => x.Path == file.Path) ? "selected" : "") @(file.IsDeleted ? "deleted" : "")" @ondblclick="() => HandleOpen(file)" @onclick="(e) => OnFileClick(e, file)" @onclick:stopPropagation="true" @oncontextmenu="(e) => OnFileClick(e, file)" >
                            @if (ShowThumbnails && ImageExtensions.Contains(Path.GetExtension(file.Name)) && file.UploadProgress == 1)
                            {
                                <MudImage ObjectFit="ObjectFit.Cover" ObjectPosition="ObjectPosition.Center" Src="@file.TargetPath" />
                            }
                            else
                            {
                                <MudIcon Icon="@GetFileIcon(file).Key" Style=@($"color: {@GetFileIcon(file).Value};")  />
                            }

                            @if (file.UploadProgress < 1) {
                                <MudProgressLinear Color="Color.Primary" Value="file.UploadProgress" Max="1"/>
                            } 
                            <MudText>@file.Name</MudText>
                        </div>
                    }
                }
                else if (!IsLoading)
                {
                    <div class="no-files">
                        <MudIcon Icon="@Icons.Material.Filled.Folder" Size="Size.Large"/>
                        <MudText>@Loc["NoFiles"]</MudText>
                    </div>
                    @* <MudAlert Severity="Severity.Info">@Loc["NoFiles"]</MudAlert> *@
                }
            </div>

            @if (IsLoading) {
                <div class="loading-indicator">
                    <MudProgressCircular Indeterminate="true" Size="Size.Large" />
                </div>
            }
        </div>
    </div>

    <MudDivider/>

    <MudToolBar Dense="true">

        @if (SelectedFiles.Count > 0)
        {
            <MudText Typo="Typo.body2">@SelectedFiles.Count of @Files.Count selected</MudText>
            <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.Close" OnClick="DeselectAllFiles"></MudIconButton>
        } 
        <MudSpacer/>

        <MudButtonGroup Class="change-view" Variant="Variant.Outlined" Size="Size.Small">
            <MudButton OnClick="() => SetView()" StartIcon="@Icons.Material.Filled.ViewList">Switch View</MudButton>
            <MudMenu Icon="@Icons.Material.Filled.ArrowDropDown" Style="align-self: auto;">
                <MudMenuItem Icon="@Icons.Material.Filled.ViewModule" @onclick="() => SetView(FileExplorerView.LargeIcons)">@Loc["Large Icons"]</MudMenuItem>
                <MudMenuItem Icon="@Icons.Material.Filled.List" @onclick="() => SetView(FileExplorerView.Information)">@Loc["Detailed"]</MudMenuItem>
            </MudMenu>
        </MudButtonGroup>
    </MudToolBar>
</MudPaper>

<MudOverlay @bind-Visible="DisplayContextMenu" ZIndex="10000" AutoClose LockScroll="false" OnClosed="CloseContextMenu" @oncontextmenu="CloseContextMenu" >
    <MudPaper Class="context-menu" Elevation="25" Width="300px" Style="@($"left: {ContextLeft}px; top: {ContextTop}px;")">
        <MudList T="string" >
            @if (DisplayNewFolderButton)
            {
                <MudListItem Icon="@Icons.Material.Filled.CreateNewFolder" OnClick="CreateNewFolder">@Loc["New Folder"]</MudListItem>
            }
            @if (DisplayDownloadButton)
            {
                <MudListItem Icon="@Icons.Material.Filled.Download" OnClick="() => Download()">@Loc["Download"]</MudListItem>
            }
            @if (DisplayDeleteButton)
            {
                <MudListItem Icon="@Icons.Material.Filled.Delete" OnClick="Delete">@Loc["Delete"]</MudListItem>
            }
            @if (DisplayQuickAccessButton)
            {
                <MudListItem Icon="@Icons.Material.Filled.AddToDrive" OnClick="AddToQuickAccess">@Loc["Add to Quick Access"]</MudListItem>
            }

            @if (MenuItemsTemplate != null)
            {
                <MudDivider />
                @MenuItemsTemplate
            }
        </MudList>
    </MudPaper>
</MudOverlay>

<FileUploader @ref="_FileUploader"
              ContainerName="@ContainerName"
              AccountName="@AccountName"
              Prefix="@(CWD?.Path)"
              DropAreaSelector="@($"#{FileExplorerId} .file-listing")"
              OnUploadProgress="HandleUploading"
              MaxFileSizeInMegaBytes="99999999"
              ValuesChanged="UploadHandler"/>

<style>

    .main-window {
        position: relative;
        flex-grow: 1;
        display: flex;
        flex-direction: column;
    }

    .breadcrumb {
    }

    .breadcrumb .mud-typography {
        margin: 0 5px;
    }

    .breadcrumb .mud-button {
        min-width: initial;
    }

    .breadcrumb button:disabled {
        color: var(--mud-palette-text-primary) !important;
    }

    .file-listing {
        padding: 20px;
        overflow: auto;
        height: 100%;
        min-height: 200px;
    }

    .file-listing.large-icons {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
        gap: 10px;
    }

    .file-explorer-item {
        cursor: pointer;
        overflow: hidden;
        text-align: center;
        padding: 4px;
    }

    .large-icons .file-explorer-item {
        width: 150px;
        height: 150px;
    }

    .large-icons .file-explorer-item .mud-icon-root,
    .large-icons .file-explorer-item .mud-image {
        height: 100px;
        width: 100px;
    }

	.information .file-explorer-item {
		display: flex;
		align-items: center;
		gap: 5px;
	}

    .information .file-explorer-item .mud-icon-root,
    .information .file-explorer-item .mud-image {
        height: 25px;
        width: 25px;
    }

    .file-explorer-item p {
        text-overflow: ellipsis;
        overflow: hidden;
        white-space: nowrap;
    }

    .file-explorer-item:hover {
        background-color: #e8eaea;
    }

    .file-explorer-item.deleted {
        background-color: #ffc7c7;
    }

    .file-explorer-item.selected {
        background-color: #83b6f2;
    }

    .file-explorer-item img {
        border-radius: 5px;
    }

    .quick-access-items {
        display: flex;
        flex-direction: column;
        gap: 10px;
    }

    .loading-indicator {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
    }

    .no-files {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        gap: 10px;
        width: 100%;
        height: 100%;
        grid-column: 1 / -1;
    }

    .no-files .mud-icon-root {
        color: #f1ce69;
    }

    .change-view .mud-menu .mud-button-root {
        width: 25px;
    }

    .context-menu {
        position: fixed;
    }
</style>