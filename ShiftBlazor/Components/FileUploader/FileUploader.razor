@namespace ShiftSoftware.ShiftBlazor.Components
@using Microsoft.AspNetCore.Components.Forms
@inherits Events.EventComponentBase
@implements IDisposable

@if (TypeAuthAction is null || TypeAuthService.Can(TypeAuthAction, TypeAuth.Core.Access.Read) || TypeAuthService.Can(TypeAuthAction, TypeAuth.Core.Access.Write) || TypeAuthService.Can(TypeAuthAction, TypeAuth.Core.Access.Delete))
{
    <MudField id="@UploaderId"
    Label="@FieldLabel"
    Class="@Classes"
    Variant="Variant.Outlined"
    Error="!string.IsNullOrWhiteSpace(ErrorText)"
    ErrorText="@ErrorText"
    Style="@(HideUI ? "display: none;" : "")">

        @if (Items.Count > 0 || !ReadOnly)
        {
            <MudGrid Spacing="@(_ShowThumbnail ? 2 : 1)">
                <CascadingValue Value="this" IsFixed="true">
                    @foreach (var item in Items)
                    {
                        <MudItem @key="item.Id" Style="cursor: grab;" data-guid="@item.Id">
                            @if (_ShowThumbnail)
                            {
                                <UploaderItemThumbnail CanDelete="@(TypeAuthAction is null || TypeAuthService.Can(TypeAuthAction, TypeAuth.Core.Access.Delete))" Item="@item" Height="@ThumbnailSize" Width="@ThumbnailSize"/>
                            }
                            else
                            {
                                <UploaderItemChip CanDelete="@(TypeAuthAction is null || TypeAuthService.Can(TypeAuthAction, TypeAuth.Core.Access.Delete))" Item="@item"/>
                            }
                        </MudItem>
                    }
                </CascadingValue>

                @if (Items.Count < MaxFileCount && !ReadOnly && (TypeAuthAction is null || TypeAuthService.Can(TypeAuthAction, TypeAuth.Core.Access.Write)))
                {
                    <MudItem @key="@("add-file")" Class="add-file">
                        @if (_ShowThumbnail)
                        {
                            <MudTooltip Text="@Loc["AddButtonTitleThumbnail"]">
                                <MudIconButton OnClick="() => OpenInput()"
                                Icon="@Icons.Material.Filled.Add"
                                Size="Size.Large"
                                Variant="Variant.Filled"
                                aria-label="@Loc["AddButtonTitleThumbnail"]"
                                Style=@($"width: {ThumbnailSize}px;height: {ThumbnailSize}px;") />
                            </MudTooltip>
                        }
                        else
                        {
                            <MudChip Icon="@Icons.Material.Filled.Add" OnClick="() => OpenInput()" T="string">@Loc["AddButtonChip"]</MudChip>
                        }
                    </MudItem>
                }
            </MudGrid>

            if (DisableToolbar != true)
            {
                <MudToolBar Dense Style="@($"background-color: {Colors.Gray.Lighten2}; margin-top: 16px; gap: 10px;")" Class="rounded">
                    <MudButtonExtended StartIcon="@Icons.Material.Filled.ViewCarousel" OnClick="ViewGallery" Size="Size.Small">@Loc["ViewGalleryButton"]</MudButtonExtended>
                    <MudButtonExtended StartIcon="@Icons.Material.Filled.GridView" OnClick="ToggleViewMode" Size="Size.Small">@Loc["ToggleViewMode"]</MudButtonExtended>
                    @if (Mode >= FormModes.Edit)
                    {
                        <MudButtonExtended StartIcon="@Icons.Material.Filled.ClearAll" OnClick="ClearAll" Size="Size.Small">@Loc["ClearAllFiles"]</MudButtonExtended>
                    }
                </MudToolBar>
            }

            <InputFile id="@InputId"
            OnChange="OnInputFileChanged"
            class="file-uploader-input"
            multiple
            @ref="InputFileRef"
            accept="@InputAccept" />

        }
        else
        {
            <MudText Typo="Typo.h6">@Loc["NoFilesSelected"]</MudText>
        }
    </MudField>
}

<MudOverlay @bind-Visible="DisplayUploadDialog" DarkBackground ZIndex="1200" LockScroll="false" OnClosed="CloseUploadDialog">
    <MudPaper Class="file-uploader-progress-dialog" Elevation="25">

        <MudToolBar Dense Class="light-toolbar">
            <MudIcon Icon="@Icons.Material.Filled.Upload"/>
            <MudText>File Uploader</MudText>
            <MudSpacer />
            <MudIconButton Icon="@Icons.Material.Filled.Close" OnClick="CloseUploadDialog"/>
        </MudToolBar>

        <MudStack Spacing="2" Class="upload-list">
            @foreach (var item in Items.Where(x => x.State != FileUploadState.None).Reverse())
            {
                <MudStack @key="item.Id" Row Spacing="2" AlignItems="AlignItems.Center">
                    @if (item.Message == null)
                    {
                        <MudIcon Icon="@(item.IsImage() ? Icons.Material.Filled.Image : Icons.Material.Filled.InsertDriveFile)" />
                    }
                    else
                    {
                        <MudTooltip Text="@item.Message.Title">
                            <MudIconButton Style="padding: 0;" Icon="@Icons.Material.Filled.Error" Color="Color.Error" OnClick="() => OpenErrorDialog(item.Message)" />
                        </MudTooltip>
                    }
                    <MudText title="@item.GetFileName()" Style="width: 600px; white-space: nowrap; text-overflow: ellipsis; overflow: hidden;">@item.GetFileName()</MudText>

                    @if (item.Progress == 1 && item.Message == null)
                    {
						<MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" />
                    }
                    else
                    {
                        <MudProgressLinear Color="item.Message == null ? Color.Primary : Color.Error" Style="max-width: 200px;" Indeterminate="item.IsWaitingForUpload" Value="item.Progress" Max="1" />
                    }

                    <MudSpacer/>
                    <MudIconButton Icon="@Icons.Material.Filled.Close" Disabled="item.State == FileUploadState.Uploaded" OnClick="@(() => Remove(item))" />
                </MudStack>
            }

			<MudToolBar Dense>
				<MudButton Color="Color.Error" OnClick="CancelAllUploads">Cancel All</MudButton>
                <MudSpacer/>
                <MudButton OnClick="ClearUploaded">Clear Completed</MudButton>
				<MudButton OnClick="() => OpenInput()">Upload</MudButton>
            </MudToolBar>
        </MudStack>
    </MudPaper>
</MudOverlay>
