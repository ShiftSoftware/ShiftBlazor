@namespace ShiftSoftware.ShiftBlazor.Components
@using Microsoft.AspNetCore.Components.Forms
@using ShiftSoftware.ShiftBlazor.Enums;
@using ShiftSoftware.ShiftBlazor.Extensions;
@inject MessageService MessageService
@inject HttpClient HttpClient
@inject SettingManager SettingManager

<MudStack Style="width: 100%">
    <MudFileUpload T="IReadOnlyList<IBrowserFile>"
                   OnFilesChanged="OnInputFileChanged"
                   Hidden="false"
                   Class="flex-1"
                   InputClass="absolute mud-width-full mud-height-full overflow-hidden z-20"
                   InputStyle="opacity:0"
                   MaximumFileCount="100"
                   Disabled="@(Disabled || FormIsDisabled || FormIsReadOnly)"
                   @ondragenter="@SetDragClass"
                   @ondragleave="@ClearDragClass"
                   @ondragend="@ClearDragClass">
        <ButtonTemplate>
            <MudPaper Outlined="true" Class="@DragClass">
                @if (Files.Count == 0)
                {
                    @if (FormIsReadOnly)
                    {
                        <MudText Typo="Typo.h6">No files attached</MudText>
                    }
                    else
                    {
                        <MudText Typo="Typo.h6">Drag and drop files here or click</MudText>
                    }
                }
                <div style="display: flex; gap: 20px;flex-wrap: wrap;">
                    @foreach (var file in Files)
                    {
                        <div style="position:relative;width: 200px;height: 200px;overflow: hidden;display: inline-flex; border-radius: 20px;">
                            <MudImage Src="@file.ImageData" ObjectFit="ObjectFit.Cover" Height="200" Width="200" ObjectPosition="ObjectPosition.Center"></MudImage>
                            <MudChip Color="Color.Dark" Text="@file.File.Name" Style="position: absolute;bottom: 0;width: 200px;border-radius: 20px;padding: 8px 16px;margin: 0;overflow: hidden;white-space: break-spaces;height: auto;max-height: 80px" />
                        </div>
                    }
                </div>
            </MudPaper>
        </ButtonTemplate>
    </MudFileUpload>

    <MudToolBar DisableGutters="true" Class="gap-4">
        <MudButton OnClick="Upload" Disabled="@(!Files.Where(x => !x.Uploaded).Any())" Color="Color.Primary" Variant="Variant.Filled">Upload</MudButton>
        <MudButton OnClick="Clear" Disabled="@(!Files.Any())" Color="Color.Error" Variant="Variant.Filled">Clear</MudButton>
    </MudToolBar>
</MudStack>

@code {
    [Parameter]
    public object Values { get; set; }

    [Parameter]
    public EventCallback<object> ValuesChanged { get; set; }

    [Parameter]
    public Color Color { get; set; } = Color.Primary;

    [Parameter]
    public Variant Variant { get; set; } = Variant.Filled;

    [Parameter]
    public string HtmlTag { get; set; } = "label";

    [Parameter]
    public string Icon { get; set; } = Icons.Material.Filled.CloudUpload;

    [Parameter]
    public int MaxFileCount { get; set; } = 32;

    [Parameter, EditorRequired]
    public string Url { get; set; }

    [CascadingParameter]
    public FormModes? Mode { get; set; }

    [CascadingParameter]
    public FormTasks? TaskInProgress { get; set; }

    internal bool Disabled = false;
    internal long MaxImageThumbnailSize = 2 * 1024 * 1024;
    internal IList<UploadFiles> Files = new List<UploadFiles>();

    public bool FormIsReadOnly => Mode<FormModes.Edit;
    public bool FormIsDisabled => TaskInProgress != null && TaskInProgress != FormTasks.None;

    private static string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full z-10";
    private string DragClass = DefaultDragClass;

    private async Task OnInputFileChanged(InputFileChangeEventArgs e)
    {
        ClearDragClass();

        if (e.FileCount + Files.Count > MaxFileCount)
        {
            MessageService.Warning($"Max file count for this form is {MaxFileCount}");
            return;
        }

        var files = e.GetMultipleFiles(MaxFileCount);
        foreach (var file in files)
        {
            var imageDataUrl = "";
            if (file.ContentType.StartsWith("image") && file.Size <= MaxImageThumbnailSize)
            {
                var memoryStream = new MemoryStream();
                await file.OpenReadStream(MaxImageThumbnailSize).CopyToAsync(memoryStream);
                var bytes = memoryStream.ToArray();
                var base64String = Convert.ToBase64String(bytes);
                imageDataUrl = $"data:{file.ContentType};base64,{base64String}";
                memoryStream.Dispose();
            }

            Files.Add(new UploadFiles
            {
                File = file,
                ImageData = imageDataUrl
            });
        }
    }

    private async Task Clear()
    {
        Files.Clear();
        ClearDragClass();
        await Task.Delay(100);
    }

    private async Task Upload()
    {
        Disabled = true;
        var files = Files.Where(x => !x.Uploaded);

        if (files.Count() == 0)
        {
            return;
        }

        var multipartContent = new MultipartFormDataContent();
        foreach (var file in files)
        {
            var memoryStream = new MemoryStream();
            await file.File.OpenReadStream(MaxImageThumbnailSize).CopyToAsync(memoryStream);
            var content = new StreamContent(memoryStream);
            multipartContent.Add(content, "File", file.File.Name);
        }

        var url = SettingManager.Configuration.ApiPath.AddUrlPath(Url);
        var postResponse = await HttpClient.PostAsync(url, multipartContent);

        if (postResponse.IsSuccessStatusCode)
        {
            foreach (var file in Files)
            {
                file.Uploaded = true;
            }
        }
        Disabled = false;
        multipartContent.Dispose();
    }

    private void SetDragClass()
    {
        DragClass = $"{DefaultDragClass} mud-border-primary";
    }

    private void ClearDragClass()
    {
        DragClass = DefaultDragClass;
    }

    public class UploadFiles
    {
        public IBrowserFile File { get; set; }
        public string ImageData { get; set; }
        public bool Uploaded { get; set; }
    }
}
