@namespace ShiftSoftware.ShiftBlazor.Components
@using Microsoft.AspNetCore.Components.Forms
@using ShiftSoftware.ShiftBlazor.Enums;
@using ShiftSoftware.ShiftBlazor.Extensions;
@inject MessageService MessageService
@inject HttpClient HttpClient
@inject SettingManager SettingManager

<MudStack Style="width: 100%">

    <MudPaper Class="@DefaultClass" Elevation="0" Outlined="true" >
        @if (Files.Count != 0)
        {
            <MudGrid Spacing="2">I
                @foreach (var file in Files)
                {
                    <MudItem>
                        <MudCard Style="min-width: 150px;max-width: 500px;display: flex;flex-direction: column;">
                            <MudCardMedia Image="@file.ImageData" Height="200" />
                            <MudCardContent Style="flex-grow: 1;">
                                <MudText Align="Align.Center">@file.File.Name</MudText>
                            </MudCardContent>
                            <MudCardActions Style="padding: 0;">
                                <MudButton OnClick="@(() => Remove(file))" Variant="Variant.Filled" Color="Color.Default" DisableElevation FullWidth Style="border-radius: 0;">Remove</MudButton>
                            </MudCardActions>
                        </MudCard>
                    </MudItem>
                }
            </MudGrid>
        }

        @if (Files.Count == 0 && FormIsReadOnly)
        {
            <MudText Typo="Typo.h6">No files attached</MudText>
        }

        @if (!FormIsReadOnly)
        {
            <MudToolBar DisableGutters="true" Class="gap-4">
                    <MudButton Color="Color.Primary" Variant="Variant.Filled" Style="padding: 0;">
                        <MudInputLabel ForId="@InputId" Style="cursor: pointer;padding: 6px 16px;display: inline-flex;gap: 10px;align-items: center;">
                            <MudIcon Icon="@Icons.Material.Filled.FindInPage"></MudIcon>
                            Browse
                        </MudInputLabel>
                    </MudButton>
                    <MudButton StartIcon="@Icons.Material.Filled.CloudUpload" OnClick="Upload" Disabled="@(!Files.Where(x => !x.Uploaded).Any())" Color="Color.Primary" Variant="Variant.Filled">Upload</MudButton>
                    <MudButton StartIcon="@Icons.Material.Filled.ClearAll" OnClick="Clear" Disabled="@(!Files.Any())" Color="Color.Error" Variant="Variant.Filled">Clear</MudButton>
            </MudToolBar>
            <InputFile id="@InputId" OnChange="OnInputFileChanged" hidden multiple />
        }
    </MudPaper>
</MudStack>

@code {

    [Parameter]
    public object Values { get; set; }

    [Parameter]
    public EventCallback<object> ValuesChanged { get; set; }

    [Parameter]
    public Color Color { get; set; } = Color.Primary;

    [Parameter]
    public Variant Variant { get; set; } = Variant.Filled;

    [Parameter]
    public string HtmlTag { get; set; } = "label";

    [Parameter]
    public string Icon { get; set; } = Icons.Material.Filled.CloudUpload;

    [Parameter]
    public int MaxFileCount { get; set; } = 32;

    [Parameter, EditorRequired]
    public string Url { get; set; }

    [CascadingParameter]
    public FormModes? Mode { get; set; }

    [CascadingParameter]
    public FormTasks? TaskInProgress { get; set; }

    internal string InputId = "Input" + Guid.NewGuid().ToString().Replace("-", string.Empty);
    internal bool Disabled = false;
    internal long MaxImageThumbnailSize = 10 * 1024 * 1024;
    internal IList<UploadFiles> Files = new List<UploadFiles>();

    public bool FormIsReadOnly => Mode<FormModes.Edit;
    public bool FormIsDisabled => TaskInProgress != null && TaskInProgress != FormTasks.None;

    private static string DefaultClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full z-10";

    private async Task OnInputFileChanged(InputFileChangeEventArgs e)
    {
        if (e.FileCount + Files.Count > MaxFileCount)
        {
            MessageService.Warning($"Max file count for this form is {MaxFileCount}");
            return;
        }

        var files = e.GetMultipleFiles(MaxFileCount);
        foreach (var file in files)
        {
            var imageDataUrl = "";
            if (file.ContentType.StartsWith("image") && file.Size <= MaxImageThumbnailSize)
            {
                var memoryStream = new MemoryStream();
                await file.OpenReadStream(MaxImageThumbnailSize).CopyToAsync(memoryStream);
                var bytes = memoryStream.ToArray();
                var base64String = Convert.ToBase64String(bytes);
                imageDataUrl = $"data:{file.ContentType};base64,{base64String}";
                memoryStream.Dispose();
            }

            Files.Add(new UploadFiles
            {
                File = file,
                ImageData = imageDataUrl
            });
        }
    }

    private async Task Clear()
    {
        Files.Clear();
        await Task.Delay(100);
    }

    internal async Task Remove(UploadFiles file)
    {
        Files.Remove(file);
    }

    private async Task Upload()
    {
        Disabled = true;
        var files = Files.Where(x => !x.Uploaded);

        if (files.Count() == 0)
        {
            return;
        }

        var multipartContent = new MultipartFormDataContent();
        foreach (var file in files)
        {
            var memoryStream = new MemoryStream();
            await file.File.OpenReadStream(MaxImageThumbnailSize).CopyToAsync(memoryStream);
            var content = new StreamContent(memoryStream);
            multipartContent.Add(content, "File", file.File.Name);
        }

        var url = SettingManager.Configuration.ApiPath.AddUrlPath(Url);
        var postResponse = await HttpClient.PostAsync(url, multipartContent);

        if (postResponse.IsSuccessStatusCode)
        {
            foreach (var file in Files)
            {
                file.Uploaded = true;
            }
        }
        Disabled = false;
        multipartContent.Dispose();
    }

    public class UploadFiles
    {
        public IBrowserFile File { get; set; }
        public string ImageData { get; set; }
        public bool Uploaded { get; set; }
    }
}
