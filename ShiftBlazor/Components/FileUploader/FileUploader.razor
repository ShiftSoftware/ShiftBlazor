@namespace ShiftSoftware.ShiftBlazor.Components
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.JSInterop
@using ShiftSoftware.ShiftBlazor.Enums
@using ShiftSoftware.ShiftBlazor.Extensions
@using System.Net.Http.Json
@inject MessageService MessageService
@inject HttpClient HttpClient
@inject SettingManager SettingManager
@inject IJSRuntime JsRuntime

<MudStack Style="width: 100%">

    <MudPaper Class="@DefaultClass" Elevation="0" Outlined="true">

        @if (Files.Count > 0 && !FormIsReadOnly)
        {
            <MudGrid Spacing="@(ShowThumbnail ? 2 : 1)">
                @foreach (var file in Files)
                {
                    <MudItem draggable="true" Style="cursor: grab;">
                        @if (ShowThumbnail)
                        {
                            <MudPaper title="@file.File.Name" Style="position: relative;display: flex;overflow: hidden;flex-direction: column;">
                                <MudToolBar Dense Style="position: absolute; top: 0; left: 0;width: 100%;padding: 0">
                                    <MudSpacer></MudSpacer>
                                    @if (file.UploadSuccess == false)
                                    {
                                        <MudIconButton Title="Retry" OnClick="@(() => UploadFile(file))" Icon="@Icons.Material.Filled.Replay"></MudIconButton>
                                    }
                                    <MudIconButton Title="Remove" OnClick="@(() => Remove(file))" Icon="@Icons.Material.Filled.RemoveCircle"></MudIconButton>
                                </MudToolBar>
                                @if (file.IsImage() && !string.IsNullOrWhiteSpace(file.ImageData))
                                {
                                    <MudImage draggable="false" Src="@file.ImageData" Alt="@file.File.Name" Height="@ThumbnailSize" Width="@ThumbnailSize" ObjectFit="ObjectFit.Cover" ObjectPosition="ObjectPosition.Center"></MudImage>
                                }
                                else
                                {
                                    <MudIcon Icon="@(file.IsImage() ? Icons.Material.Filled.Image : Icons.Material.Filled.InsertDriveFile)" Style=@($"height: {ThumbnailSize}px;width: {ThumbnailSize}px;")></MudIcon>
                                }

                                @if (file.UploadSuccess == null)
                                {
                                    <MudProgressLinear Color="Color.Primary" Indeterminate="true" />
                                }
                                else
                                {
                                    <MudProgressLinear Color="file.UploadSuccess == true ? Color.Success : Color.Error" Value="100"/>
                                }
                            </MudPaper>
                        }
                        else
                        {
                            <MudChip OnClose="@(() => Remove(file))">
                                <div style="display: flex;gap: 10px;">
                                    @if (FormIsReadOnly)
                                    {
                                        <MudIcon Icon="@(file.IsImage() ? Icons.Material.Filled.Image : Icons.Material.Filled.InsertDriveFile)" />
                                    }
                                    else if (file.UploadSuccess == null)
                                    {
                                        <MudProgressCircular Color="Color.Primary" Size="Size.Small" Indeterminate="true" />
                                    }
                                    else if (file.UploadSuccess == true)
                                    {
                                        <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success"/>
                                    }
                                    else
                                    {
                                        <MudIcon Icon="@Icons.Material.Filled.Error" Color="Color.Error"/>
                                    }
                                    <MudText>@file.File.Name</MudText>
                                </div>
                            </MudChip>
                        }
                    </MudItem>
                }

                @if (!FormIsReadOnly)
                {
                    <MudItem Class="add-file">
                        @if (ShowThumbnail)
                        {
                            <MudIconButton OnClick="OpenInput" Icon="@Icons.Material.Filled.Add" Size="Size.Large" Variant="Variant.Filled" Style=@($"width: {ThumbnailSize}px;height: {ThumbnailSize}px;")></MudIconButton>
                        }
                        else
                        {
                            <MudChip Icon="@Icons.Material.Filled.Add" OnClick="OpenInput">Add</MudChip>
                        }
                    </MudItem>
                }
            </MudGrid>
        }

        <InputFile id="@InputId" OnChange="OnInputFileChanged" hidden multiple accept="@InputAccept" />

        @if (Files.Count == 0 && FormIsReadOnly)
        {
            <MudText Typo="Typo.h6">No files attached</MudText>
        }
    </MudPaper>
</MudStack>

<style>
    .mud-grid-item.dragging {
        opacity: 0.5;
    }

    .mud-grid-item.dragging .mud-paper * {
        opacity: 0;
    }
</style>

@code {
    [Parameter]
    public List<string> Values { get; set; } = new();

    [Parameter]
    public EventCallback<List<string>> ValuesChanged { get; set; }

    [Parameter]
    public int MaxFileCount { get; set; } = 32;

    [Parameter]
    public int MaxFileSizeInMegaBytes { get; set; } = 32;

    [Parameter, EditorRequired]
    public string Url { get; set; }

    [Parameter]
    public string Accept { get; set; } = "";

    [Parameter]
    public bool AcceptImages { get; set; }

    [Parameter]
    public bool ShowThumbnail { get; set; }

    [Parameter]
    public long MaxThumbnailSizeInMegaBytes { get; set; } = 10;

    [CascadingParameter]
    public FormModes? Mode { get; set; }

    [CascadingParameter]
    public FormTasks? TaskInProgress { get; set; }

    internal string InputId = "Input" + Guid.NewGuid().ToString().Replace("-", string.Empty);
    internal bool Disabled = false;
    internal List<UploadFiles> Files = new List<UploadFiles>();
    internal string ImageTypes = "image/*";
    internal int ThumbnailSize = 150;

    internal string InputAccept
    {
        get
        {
            var val = Accept;
            if (AcceptImages)
            {
                val += "," + ImageTypes;
            }
            return val.Trim(',');
        }
    }

    public bool FormIsReadOnly => Mode < FormModes.Edit;
    public bool FormIsDisabled => TaskInProgress != null && TaskInProgress != FormTasks.None;

    private static string DefaultClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full z-10";

    private async Task OnInputFileChanged(InputFileChangeEventArgs e)
    {
        if (e.FileCount + Files.Count > MaxFileCount)
        {
            MessageService.Warning($"Max file count for this form is {MaxFileCount}");
            return;
        }

        var files = e.GetMultipleFiles(MaxFileCount);

        Files.AddRange(files.Select(x => new UploadFiles {File = x}).ToList());

        foreach (var file in Files.Where(x => x.UploadSuccess == null))
        {
            await UploadFile(file);
        }

        Values = Files.Where(x => x.UploadName != null).Select(x => x.UploadName).ToList();
    }

    internal void Remove(UploadFiles file)
    {
        Files.Remove(file);
    }

    internal async Task UploadFile(UploadFiles file)
    {
        file.UploadSuccess = null;
        var url = SettingManager.Configuration.ApiPath.AddUrlPath(Url);
        using (var multipartContent = new MultipartFormDataContent())
        {
            try
            {
                var maxFileSize = MaxFileSizeInMegaBytes * 1024 * 1024;
                var stream = file.File.OpenReadStream(maxFileSize);

                file.ImageData = await ToImageDataUri(stream, file);

                // Upload file
                using (var content = new StreamContent(stream))
                {
                    multipartContent.Add(content, "File", file.File.Name);
                    var postResponse = await HttpClient.PostAsync(url, multipartContent);
                    file.UploadSuccess = postResponse.IsSuccessStatusCode;

                    if (postResponse.IsSuccessStatusCode)
                    {
                        file.UploadName = (await postResponse.Content.ReadFromJsonAsync<TmpResponse>())?.Name;
                    }
                }
            }
            catch (Exception)
            {
                file.UploadSuccess = false;
            }
        }
    }

    internal void OpenInput()
    {
        JsRuntime.InvokeVoidAsync("ClickElementById", InputId);
    }

    internal async Task<string?> ToImageDataUri(Stream stream, UploadFiles file)
    {
        var maxThumbnailSize = MaxThumbnailSizeInMegaBytes * 1024 * 1024;

        if (ShowThumbnail && file.IsImage() && file.File.Size <= maxThumbnailSize && string.IsNullOrWhiteSpace(file.ImageData))
        {
            try
            {
                using (var memoryStream = new MemoryStream())
                {
                    await stream.CopyToAsync(memoryStream);
                    var bytes = memoryStream.ToArray();
                    var base64String = Convert.ToBase64String(bytes);
                    return $"data:{file.File.ContentType};base64,{base64String}";
                }
            }
            catch (Exception) { }
        }

        return null;
    }

    public class UploadFiles
    {
        public IBrowserFile File { get; set; }
        public string? ImageData { get; set; }
        public bool? UploadSuccess { get; set; }
        public string? UploadName { get; set; }

        public bool IsImage() => File.ContentType.StartsWith("image");
    }

    public class TmpResponse
    {
        public string Name { get; set; }
    }
}
