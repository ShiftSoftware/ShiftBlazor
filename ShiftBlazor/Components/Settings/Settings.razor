@using System.Text.RegularExpressions
@using Microsoft.JSInterop;
@using ShiftSoftware.ShiftBlazor.Enums;
@inject SettingManager SettingManager
@inject NavigationManager NavManager
@inject  IJSRuntime JsRuntime
@inject ShiftBlazorLocalizer Loc

@namespace ShiftSoftware.ShiftBlazor.Components

<style>
    .settings {
        display: grid;
        grid-template-columns: 1fr 3fr;
        align-items: center;
    }
</style>

<MudDialog>
    <DialogContent>
        <h2>@Loc["SettingsHeader"]</h2>
        <br />

        <MudStack Spacing="6">
            <MudField Label="@Loc["AppSettings"]" Variant="Variant.Outlined">
                <MudGrid Style="align-items: end;" Spacing="0">

                    <MudItem xs="3">
                        <MudText>@Loc["Language"]</MudText>
                    </MudItem>

                    <MudItem xs="9">
                        <MudSelect Margin="Margin.Dense" T="LanguageInfo" Value="@Language" ValueChanged="LanguageChangedHandler" ToStringFunc="(lang) => lang.Label">
                            @foreach (var lang in SettingManager.Configuration.Languages)
                            {
                                <MudSelectItem Value="@lang">@Loc[lang.Label ?? lang.CultureName]</MudSelectItem>
                            }

                        </MudSelect>
                    </MudItem>

                    <MudItem xs="3">
                        <MudText>@Loc["DateFormat"]</MudText>
                    </MudItem>

                    <MudItem xs="9">
                        <MudSelect Margin="Margin.Dense" T="string" Value="DateFormat" ValueChanged="DateFormatChangedHandler">
                            @foreach (var format in DateFormats)
                            {
                                <MudSelectItem Value="@format">@format</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>

                    <MudItem xs="3">
                        <MudText>@Loc["TimeFormat"]</MudText>
                    </MudItem>

                    <MudItem xs="9">
                        <MudSelect Margin="Margin.Dense" T="string" Value="TimeFormat" ValueChanged="TimeFormatChangedHandler">
                            @foreach (var format in TimeFormats)
                            {
                                <MudSelectItem Value="@format">@format</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>

                </MudGrid>
            </MudField>

            <MudField Label="@Loc["DataGridSettings"]" Variant="Variant.Outlined">

                <MudGrid Style="align-items: center;" Spacing="0">

                    <MudItem xs="3">
                        <MudText>@Loc["DataGridItemPerPage"]</MudText>
                    </MudItem>

                    <MudItem xs="9">
                        <MudSelect Margin="Margin.Dense" T="int" Label="@Loc["DataGridItemPerPageLabel"]" Value="PageSize" ValueChanged="PageSizeChangedHandler" Dense="true" Style=@($"width: 150px;display: flex;")>
                            @foreach (var size in PageSizes)
                            {
                                <MudSelectItem Value="@size">@size</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>

                </MudGrid>
            </MudField>

            <MudField Label="@Loc["FormSettings"]" Variant="Variant.Outlined">
                <MudGrid Style="align-items: center;" Spacing="0">

                    <MudItem xs="3">
                        <MudText>@Loc["ModalPosition"]</MudText>
                    </MudItem>

                    <MudItem xs="9">
                        <MudSelect Margin="Margin.Dense" T="DialogPosition" Value="ModalPosition" ValueChanged="DialogPositionChangedHandler">
                            @foreach (var pos in Enum.GetValues<DialogPosition>().Where(x => x != DialogPosition.Custom))
                            {
                                <MudSelectItem Value="@pos">@Loc[$"DialogPosition{pos.ToString()}"]</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>

                    <MudItem xs="3">
                        <MudText>@Loc["ModalSize"]</MudText>
                    </MudItem>

                    <MudItem xs="9">
                        <MudSelect Margin="Margin.Dense" T="MaxWidth" Value="ModalWidth" ValueChanged="ModalWidthChangedHandler">
                            @foreach (var width in Enum.GetValues<MaxWidth>())
                            {
                                <MudSelectItem Value="@width">@Loc[$"DialogSize{width.ToString()}"]</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>

                    <MudItem xs="3">
                        <MudText>@Loc["FormCloseBehavior"]</MudText>
                    </MudItem>

                    <MudItem xs="9">
                        <MudSelect Margin="Margin.Dense" T="FormOnSaveAction" Value="FormCloseAction" ValueChanged="FormCloseActionChangedHandler">
                            @foreach (var action in Enum.GetValues<FormOnSaveAction>())
                            {
                                <MudSelectItem Value="@action">@Loc[$"FormAction{action.ToString()}"]</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>

                    <MudItem xs="3">
                        <MudText>@Loc["Enable Clone Everywhere"]</MudText>
                    </MudItem>

                    <MudItem xs="9">
                        <MudSelect Margin="Margin.Dense" T="bool" Value="EnableClone" ValueChanged="EnableCloneChangedHandler">
                            <MudSelectItem Value="false">@Loc[$"Disable"]</MudSelectItem>
                            <MudSelectItem Value="true">@Loc[$"Enable"]</MudSelectItem>
                        </MudSelect>
                    </MudItem>

                </MudGrid>
            </MudField>
        </MudStack>
    </DialogContent>

    <DialogActions>
        <MudButton Color="Color.Primary" OnClick="ReloadPage">@Loc["OkButton"]</MudButton>
    </DialogActions>
</MudDialog>
@code {
    private int PageSize { get; set; } = default!;
    private DialogPosition ModalPosition { get; set; } = default!;
    private MaxWidth ModalWidth { get; set; } = default!;
    private FormOnSaveAction FormCloseAction { get; set; } = default!;
    private string DateFormat = default!;
    private string TimeFormat = default!;
    private LanguageInfo Language { get; set; } = default!;
    private bool EnableClone { get; set; } = default!;

    private int[] PageSizes = new int[] { 5, 10, 50, 100, 250, 500 };
    private string FormBehavior { get; set; } = "";
    private string[] DateFormats = new string[] { "yyyy-MM-dd", "yyyy/MM/dd", "yy-M-d", "yy/M/d", "dd-MM-yyyy", "dd/MM/yyyy", "d-M-yy", "d/M/yy" };
    private string[] TimeFormats = new string[] { "hh:mm tt", "HH:mm" };

    protected override void OnInitialized()
    {
        PageSize = SettingManager.GetListPageSize();
        DateFormat = SettingManager.GetDateFormat();
        TimeFormat = SettingManager.GetTimeFormat();
        ModalPosition = SettingManager.GetModalPosition();
        ModalWidth = SettingManager.GetModalWidth();
        FormCloseAction = SettingManager.GetFormOnSaveAction();
        Language = SettingManager.GetLanguage();
        EnableClone = SettingManager.GetFormCloneSetting();
    }

    internal void PageSizeChangedHandler(int size)
    {
        PageSize = size;
        SettingManager.SetListPageSize(size);
    }

    internal void DialogPositionChangedHandler(DialogPosition position)
    {
        ModalPosition = position;
        SettingManager.SetModalPosition(position);
    }

    internal void DateFormatChangedHandler(string format)
    {
        DateFormat = format;
        SettingManager.SetDateFormat(format);
    }

    internal void TimeFormatChangedHandler(string format)
    {
        TimeFormat = format;
        SettingManager.SetTimeFormat(format);
    }

    internal void ModalWidthChangedHandler(MaxWidth width)
    {
        ModalWidth = width;
        SettingManager.SetModalWidth(width);
    }

    internal void FormCloseActionChangedHandler(FormOnSaveAction action)
    {
        FormCloseAction = action;
        SettingManager.SetFormSaveAction(action);
    }

    internal void LanguageChangedHandler(LanguageInfo lang)
    {
        Language = lang;
        SettingManager.SwitchLanguage(lang, false);
    }

    internal void EnableCloneChangedHandler(bool clone)
    {
        EnableClone = clone;
        SettingManager.SetFormCloneSetting(clone);
    }

    internal async Task ReloadPage()
    {
        await JsRuntime.InvokeVoidAsync("reloadPage");
    }
}
