@using ShiftSoftware.ShiftBlazor.Enums
@using Blazored.FluentValidation
@using Microsoft.AspNetCore.Components.Forms
@typeparam T where T : class, new()
@namespace ShiftSoftware.ShiftBlazor.Components
@implements IShortcutComponent
@implements IShiftForm

@if (!string.IsNullOrWhiteSpace(DocumentTitle))
{
    <PageTitle>@DocumentTitle</PageTitle>
}

<CascadingValue Value="this" Name="ShiftForm">
<article style="height: 100%;" id="@($"Form-{Id}")">
    <MudFocusTrap Disabled="MudDialog == null">
        
        <MudPaper Elevation="25" Style="height: 100%;">

            <header>
                @if (!DisableHeaderToolbar)
                {
                    <MudToolBar Dense="true" Class="light-toolbar shift-toolbar-header" Style="@ColorHelperClass.GetToolbarStyles(NavColor, NavIconFlatColor)">
                        <MudIcon Icon="@IconSvg"></MudIcon>
                        <MudText Class="px-4" Style="margin:0;">@(Title ?? Loc["FormDefaultTitle"])</MudText>

                        @ToolbarStartTemplate

                        <MudSpacer></MudSpacer>

                        @if (ToolbarCenterTemplate != null)
                        {
                            @ToolbarCenterTemplate
                            <MudSpacer></MudSpacer>
                        }

                        @ToolbarEndTemplate

                        @if (ToolbarEndTemplate != null && MudDialog != null)
                        {
                            <MudDivider Vertical="true" Style="height: 60%;align-self: center;margin-inline: 5px;opacity: 0.5;"></MudDivider>
                        }

                        @if (MudDialog != null)
                        {
                            @ToolbarControlsTemplate

                            <MudTooltip Text="@Loc["ModalClose"]">
                                <MudButton Style="min-width:40px;"
                                            Variant="Variant.Text"
                                            Size="Size.Medium"
                                            Color="NavIconFlatColor ? Color.Inherit : Color.Default"
                                            aria-label="@Loc["ModalClose"]"
                                            OnClick="() => Cancel()">
                                    <MudIcon Size="Size.Medium" Icon="@Icons.Material.Filled.Close" />
                                </MudButton>
                            </MudTooltip>
                        }
                    </MudToolBar>
                }

                @HeaderTemplate

                @if (AlertEnabled)
                {
                    <MudAlert Severity="@AlertSeverity">@AlertMessage</MudAlert>
                }
            </header>

            <EditForm Model="Value"
                      @ref="Form"
                          OnSubmit="@(async () => await SubmitHandler(this.EditContext))"
                      style="height: 100%;">
                <FluentValidationValidator DisableAssemblyScanning="Validator != null" Validator="Validator" />
                @if (Validator == null)
                {
                    <DataAnnotationsValidator />
                }
                @* <ValidationSummary></ValidationSummary> *@

                <div class="@ContentCssClass">
                    <div class="pa-6">
                        <CascadingValue Value="Mode < FormModes.Edit" Name="@FormHelper.ParentReadOnlyName">
                        <CascadingValue Value="TaskInProgress != FormTasks.None" Name="@FormHelper.ParentDisabledName">
                            @if (TypeAuthAction is null)
                            {
                                @ChildContent
                            }
                            else
                            {
                                if (Mode == FormModes.Create || Mode == FormModes.Edit)
                                {
                                    if (TypeAuthService == null || TypeAuthService.Can(TypeAuthAction, TypeAuth.Core.Access.Write))
                                    {
                                        @ChildContent
                                    }
                                    else
                                    {
                                        <MudAlert Severity="Severity.Error">@Loc["WriteAccessDenied", Title]</MudAlert>
                                    }
                                }
                                else if (Mode == FormModes.View || Mode == FormModes.Archive)
                                {
                                    if (TypeAuthService == null || TypeAuthService.Can(TypeAuthAction, TypeAuth.Core.Access.Read))
                                    {
                                        @ChildContent
                                    }
                                    else
                                    {
                                        <MudAlert Severity="Severity.Error">@Loc["ReadAccessDenied", Title]</MudAlert>
                                    }
                                }
                            }
                        </CascadingValue>
                        </CascadingValue>
                    </div>
                </div>
            

                <footer>
                    @FooterTemplate

                    @if (!(DisableFooterToolbar || IsFooterToolbarEmpty))
                    {
                        <MudToolBar>

                            @FooterToolbarStartTemplate

                            <MudSpacer></MudSpacer>

                            @if (FooterToolbarCenterTemplate != null)
                            {
                                @FooterToolbarCenterTemplate
                                <MudSpacer></MudSpacer>
                            }

                            @FooterToolbarEndTemplate

                            @if (_RenderSubmitButton)
                            {
                                    <MudButtonExtended KeyboardKey="KeyboardKeys.KeyS" Color="Color.Primary" ButtonType="ButtonType.Button" OnClick="async () => await Form!.OnSubmit.InvokeAsync(Form.EditContext)" Disabled="@DisableSubmit">
                                    @if (TaskInProgress == FormTasks.Save)
                                    {
                                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                    }
                                    else
                                    {
                                        <MudIcon Icon="@Icons.Material.Filled.Save" />
                                    }

                                    <MudText Style="padding:0 10px;">@_SubmitText</MudText>
                                </MudButtonExtended>
                            }
                        </MudToolBar>
                    }
                </footer>
            </EditForm>
        </MudPaper>
    </MudFocusTrap>
</article>
</CascadingValue>