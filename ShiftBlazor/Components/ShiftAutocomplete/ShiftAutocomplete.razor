@typeparam TEntitySet where TEntitySet : ShiftEntityDTOBase

@namespace ShiftSoftware.ShiftBlazor.Components

<MudField InnerPadding="false"
          Class="@Classname"
          Style="@Style"
          Disabled="@IsDisabled"
          Variant="@Variant"
          Error="@Error"
          Underline="@Underline"
          ErrorText="@ErrorText">

    <div class="@InputContainerClassname" @ref="ContainerRef" style="display: flex;">

        <MudStack Row Spacing="0" Wrap="Wrap.Wrap" Style="flex-grow: 1;" @onkeydown="FieldKeyDownHandler" @onkeyup="FieldKeyUpHandler">

            @if (Adornment == Adornment.Start)
            {
                <div class="mud-input-adornment">
                    <MudIconButton Class="mud-input-adornment-icon-button mud-no-activator"
                                    Icon="@CurrentIcon"
                                    OnClick="@AdornmentClickHandler"
                                    Edge="@Edge.Start"
                                    Size="@AdornmentSize"
                                    Color="@AdornmentColor"
                                    aria-label="@AdornmentAriaLabel"
                                    tabindex="-1"
                                    @onmousedown:stopPropagation />
                </div>
            }

            @if (MultiSelect && SelectedValues?.Count > 0)
            {
                @if (GroupSelectedValues && SelectedValuesGroupTemplate != null)
                {
                    @SelectedValuesGroupTemplate(new(this))
                }
                else if (GroupSelectedValues)
                {
                    <MudMenu MaxHeight="@MaxHeight" @bind-Open="IsSelectedValuesGroupOpen">
                        <ActivatorContent>
                            <MudChip Size="Size.Small"
                                     OnClick="SelectedValuesGroupClickHandler"
                                     @onfocus="OpenSelectedValuesGroup"
                                     Value="SelectedValues.Count"/>
                        </ActivatorContent>
                        <ChildContent>
                            <MudStack Spacing="1">
                                @SelectedValuesRenderFragment
                            </MudStack>
                        </ChildContent>
                    </MudMenu>
                }
                else
                {
                    @SelectedValuesRenderFragment
                }
            }

            @if (IsIntitialValueLoading && (!GroupSelectedValues || (GroupSelectedValues && !MultiSelect)))
            {
                <div style="width: 0;">
                    @if (LoadingTemplate != null)
                    {
                        @LoadingTemplate
                    }
                    else
                    {
                        <MudProgressCircular Indeterminate="true" Size="Size.Small" Style="flex-shrink: 0;"/>
                    }
                </div>
            }
            
            @if (InputTemplate != null)
            {
                @InputTemplate(new (this))
            }
            else
            {
                <MudTextField T="string"
                              @ref="_InputRef"
                              Underline="false"
                              @onfocus="InputFocusHandler"
                              OnBlur="InputBlurHandler"
                              TextChanged="TextChangedHandler"
                              TextUpdateSuppression="TextUpdateSuppression"
                              KeyUpPreventDefault="true"
                              InputId="@InputId"
                              Immediate="true"
                              Placeholder="@Placeholder"
                              Style="@InputStyle"
                              Class="@InputClassname"
                              Value="Text" />
            }

        </MudStack>

        <div style="height: 0;">
            <div class="mud-input-adornment">

                @if (IsLoading)
                {
                    @if (LoadingTemplate != null)
                    {
                        @LoadingTemplate
                    }
                    else
                    {
                        // use 0 width to not take space in the layout
                        // otherwise it could push the input or chips down
                        // when dropdown items are being loading
                        <div style="width: 0; display: flex; justify-content: end;">
                            <MudProgressCircular Indeterminate="true" Size="Size.Small" Style="flex-shrink: 0;" />
                        </div>
                    }
                }

                @if (DisplayClearable)
                {
                    <MudIconButton OnClick="ClearSelected"
                                   Icon="@Icons.Material.Filled.Clear"
                                   Size="Size.Small"
                                   Edge="@Edge.End"
                                   tabindex="-1"/>
                }

                @if (DisplayQuickAdd)
                {
                    var itemId = MultiSelect ? null : Value?.Value;
                    <MudIconButton OnClick="() => AddEditItem(itemId)"
                                   Icon="@GetAdornmentIcon()"
                                   Size="@AdornmentSize"
                                   Edge="@Edge.End"
                                   tabindex="-1"/>
                }

                @if (Adornment == Adornment.End)
                {
                    <MudIconButton Class="mud-input-adornment-icon-button mud-no-activator"
                                   Icon="@CurrentIcon"
                                   OnClick="@AdornmentClickHandler"
                                   Edge="@Edge.End"
                                   Size="@AdornmentSize"
                                   Color="@AdornmentColor"
                                   aria-label="@AdornmentAriaLabel"
                                   tabindex="-1"
                                   @onmousedown:stopPropagation />
                }
            </div>
        </div>

    </div>

    <MudInputLabel Class="shift-autocomplete-label mud-input-label-inputcontrol"
                   Disabled="@IsDisabled"
                   Variant="@Variant"
                   ForId="@InputId">
        @Label
    </MudInputLabel>

    <MudPopover RelativeWidth="DropdownWidth.Relative"
                MaxHeight="@MaxHeight"
                Open="IsDropdownOpen"
                AnchorOrigin="@AnchorOrigin"
                TransformOrigin="@TransformOrigin"
                OverflowBehavior="@OverflowBehavior"
                Fixed="@DropdownFixed"
                Class="@DropdownClass">
        @if (DropdownItems.Count > 0 || FreeInput && MultiSelect)
        {
            @BeforeItemsTemplate
            <MudList T="TEntitySet" Class="@ListClass">
                @for (var i = 0; i < DropdownItems.Count; i++)
                {
                    var index = i;
                    var item = DropdownItems[index];
                    var isHighlighted = HighlightedListItemIndex == index;
                    var value = GetProperty(item, DataValueField);
                    var text = GetProperty(item, DataTextField);
                    var isSelected = SelectedValues?.Any(x => x.Value == value) == true;
                    <MudListItem T="TEntitySet"
                                 @key="item"
                                 id="@GetItemId(i)"
                                 OnClick="@(() => SelectItem(item))"
                                 OnClickPreventDefault="true"
                                 Class="@GetListItemClassname(isHighlighted)">

                        @if (DropdownItemTemplate != null)
                        {
                            
                            @DropdownItemTemplate(new()
                            {
                                IsHighlighted = isHighlighted,
                                IsSelected = isSelected,
                                Item = item,
                                Value = value,
                                Text = text,
                                Index = index,
                            });
                        }
                        else
                        {
                            if (MultiSelect)
                            {
                                <MudIcon Icon="@(isSelected ? Icons.Material.Filled.CheckBox : Icons.Material.Filled.CheckBoxOutlineBlank)" Class="mb-n1 mr-3" />
                            }
                            @text
                        }
                    </MudListItem>
                }

                @if (MultiSelect && FreeInput && !string.IsNullOrWhiteSpace(Text))
                {
                    <MudListItem id="@GetItemId(DropdownItems.Count)" OnClick="() => AddFreeInputValue()" Class="@GetListItemClassname(HighlightedListItemIndex >= DropdownItems.Count)">
                        Add New
                    </MudListItem>
                }
            </MudList>

            @AfterItemsTemplate
        }
        else
        {
            if (NoItemsTemplate != null)
            {
                @NoItemsTemplate
            }
            else
            {
                <MudAlert>No Items found</MudAlert>
            }
        }

    </MudPopover>
</MudField>

@* @if (IsLoading)
{
    <MudProgressLinear Indeterminate Color="Color.Primary" Size="Size.Small"/>
} *@

<MudOverlay Visible="IsDropdownOpen" LockScroll="@LockScroll" AutoClose OnClosed="() => CloseDropdown()"></MudOverlay>

<CascadingValue Value="this">
    @ChildContent
</CascadingValue>


<style>

    .shift-autocomplete .mud-input-slot-nopadding {
        padding: 0 !important;
    }

    .shift-autocomplete .shift-autocomplete-input-container {
        align-items: center;
    }

    .shift-autocomplete .shift-autocomplete-input-container.mud-input-text-with-label {
        margin-top: 16px;
    }

    .shift-autocomplete .shift-autocomplete-label {
        color: var(--mud-palette-text-secondary);
        padding: 0;
        font-size: 1rem;
        font-weight: 400;
        line-height: 1.15rem;
        letter-spacing: .00938em;
        z-index: 1;
        pointer-events: none;
    }

    .shift-autocomplete .shift-autocomplete-label.mud-input-label-outlined {
        background-color: #fff;
    }

    .shift-autocomplete .shift-autocomplete-label.mud-disabled
    {
        color: var(--mud-palette-text-disabled) !important;
    }

    .shift-autocomplete .shift-autocomplete-input-container:focus-within ~ label.shift-autocomplete-label {
        color: var(--mud-palette-primary);
    }

    .highlighted-selected-value {
        background-color: var(--mud-palette-action-disabled);
    }

    .shift-autocomplete .mud-input-filled .shift-autocomplete-input input.mud-input-root {
        padding: 27px 12px 10px;
    }

    .shift-autocomplete .mud-input-outlined .shift-autocomplete-input input.mud-input-root {
        padding: 18.5px 14px;
    }
</style>

@code {
    internal RenderFragment SelectedValuesRenderFragment =>@<text>

        @for (var i = 0; i < SelectedValues!.Count; i++)
        {
            var index = i;
            var item = SelectedValues.ElementAt(index);
            var isHighlighted = SelectedValuesIndex == index;
            var _class = isHighlighted ? ShiftAutocomplete<TEntitySet>.HighlightedClassname : string.Empty;
                        
            @if (SelectedValuesTemplate != null)
            {
                @SelectedValuesTemplate(new (this, item))
            }
            else if (IsReadOnly || IsDisabled)
            {
                <MudChip @key="item"
                         Class="@_class"
                         Value="@item.Text"
                         Size="Size.Small"
                         Disabled="IsDisabled"/>
            }
            else
            {
                <MudChip @key="item"
                         @ondblclick="@(() => AddEditItem(item.Value))"
                         OnClose="() => RemoveSelected(item)"
                         OnClick="() => ChangeSelectedValuesIndex(index)"
                         Size="Size.Small"
                         Class="@_class"
                         Value="@item.Text"
                         T="string"/>
            }
        }
    
    </text>;
}