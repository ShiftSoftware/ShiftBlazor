@typeparam TEntitySet where TEntitySet : ShiftEntityDTOBase
@typeparam TQuickAdd
@inherits ShiftAutocomplete<TEntitySet>
@namespace ShiftSoftware.ShiftBlazor.Components

@{
    if (AdornmentIconIsNotSet)
    {
        base.AdornmentIcon = Value == null || MultiSelect ? Icons.Material.Filled.AddCircle : Icons.Material.Filled.RemoveRedEye;
    }
    if (AdornmentAriaLabelIsNotSet)
    {
        base.AdornmentAriaLabel = "Add new item";
    }
    if (OnAdornmentClickIsNotSet)
    {
        var key = Value?.GetType().GetProperty("Value")?.GetValue(Value);
        base.OnAdornmentClick = new EventCallback<MouseEventArgs>(this, () => AddEditItem(key));
    }

    if (QuickAddComponentType != null && MultiSelect)
    {
        base.ShiftItemTemplate = (e) =>
        @<div>
            <MudButton OnClick="@(() => ShiftModal.Open(QuickAddComponentType, e.ID, Enums.ModalOpenMode.Popup))"
                       Variant="@Variant.Outlined"
                       EndIcon="@Icons.Material.Filled.OpenInNew"
                       Color="@Color.Primary"
                       Size="@Size.Small">
                View
            </MudButton>
        </div>;
    }

    base.BuildRenderTree(__builder);

    base.NoItemsTemplate =
    @<MudText Align="Align.Center" Class="px-4 py-1">
        @if (QuickAddComponentType == null)
        {
            <text>No Items Found</text>
        }
        else
        {
            <MudButton OnClick="() => { _ = AddEditItem(); base.Clear();}">No Items Found, Add New</MudButton>
        }
    </MudText>;
}