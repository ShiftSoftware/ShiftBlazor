@using ShiftSoftware.ShiftBlazor.Extensions
@using ShiftSoftware.ShiftBlazor.Enums
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Navigations
@typeparam T where T : ShiftEntityDTOBase, new()
@namespace ShiftSoftware.ShiftBlazor.Components
@inherits ShiftSoftware.ShiftBlazor.Events.EventComponentBase

@if(TypeAuthAction is null || TypeAuthService.Can(TypeAuthAction, TypeAuth.Core.Access.Read))
{
    @if (!string.IsNullOrWhiteSpace(Title))
    {
        <PageTitle>@Title</PageTitle>
    }

    <MudPaper Elevation="25">

        <CascadingValue Value="this" IsFixed="true">

        <header>
            @if (!DisableHeaderToolbar)
            {
                <MudToolBar Style="@ColorHelperClass.GetToolbarStyles(NavColor, NavIconFlatColor)" Dense="true" DisableGutters="false" Class="light-toolbar shift-toolbar-header">
                    <MudIcon Icon="@IconSvg"></MudIcon>
                    <MudText Class="px-4" Style="margin:0;">@(Title ?? Loc["ListDefaultTitle"])</MudText>

                    @ToolbarStartTemplate

                    <MudSpacer></MudSpacer>

                    @ToolbarEndTemplate

                    
                    @if (!DisableDeleteFilter)
                        {
                            <MudTooltip Text="@Loc["FilterDeletedItems"]">
                                <MudMenu Icon="@Icons.Material.Filled.RestoreFromTrash"
                                         Color="NavIconFlatColor ? Color.Inherit : Color.Default"
                                         AnchorOrigin="Origin.BottomLeft"
                                         Class="delete-filter-options">
                                    <MudMenuItem OnClick="() => FilterDeleted(DeleteFilter.All)">@Loc["ShowBothDeletedAndActive"]</MudMenuItem>
                                    <MudMenuItem OnClick="() => FilterDeleted(DeleteFilter.Deleted)">@Loc["ShowDeletedOnly"]</MudMenuItem>
                                    <MudMenuItem OnClick="() => FilterDeleted(DeleteFilter.Active)">@Loc["ShowActiveOnly"]</MudMenuItem>
                                </MudMenu>
                            </MudTooltip>
                        }
                        
                    @if (IsEmbedded != true)
                    {
                        @if (!DisableColumnChooser)
                        {
                            <MudTooltip Text="@Loc["ColumnChooser"]">
                                <MudIconButton Icon="@Icons.Material.Filled.ViewColumn"
                                            Color="NavIconFlatColor ? Color.Inherit : Color.Default"
                                            OnClick="ChooseColumn" />
                            </MudTooltip> 
                        }

                        @if (EnablePrint)
                        {
                            <MudTooltip Text="@Loc["PrintButton"]">
                                <MudIconButton Icon="@Icons.Material.Filled.Print"
                                               Color="NavIconFlatColor ? Color.Inherit : Color.Warning"
                                               OnClick="PrintList" />
                            </MudTooltip>
                        }
                        @if (EnableCsvExcelExport || EnablePdfExport)
                        {
                            <MudTooltip Text="@Loc["DownloadButton"]">
                                <MudMenu Icon="@Icons.Material.Filled.FileDownload"
                                         Color="NavIconFlatColor ? Color.Inherit : Color.Warning"
                                         AnchorOrigin="Origin.BottomLeft"
                                         Class="download-options">
                                    @if (EnableCsvExcelExport)
                                    {
                                        <MudMenuItem OnClick="() => DownloadList(DownloadType.CSV)">@Loc["CSVExportButton"]</MudMenuItem>
                                        <MudMenuItem OnClick="() => DownloadList(DownloadType.Excel)">@Loc["ExcelExportButton"]</MudMenuItem>
                                    }
                                    @if (EnablePdfExport)
                                    {
                                        <MudMenuItem OnClick="() => DownloadList(DownloadType.PDF)">@Loc["PDFExportButton"]</MudMenuItem>
                                    }
                                </MudMenu>
                            </MudTooltip>
                        }
                    }

                    @if (RenderAddButton)
                    {
                        <MudTooltip Text="@Loc["AddButton"]">
                            <MudButton Style="min-width:40px;"
                                       Variant="Variant.Text"
                                       Size="Size.Medium"
                                       Color="NavIconFlatColor ? Color.Inherit : Color.Primary"
                                       OnClick="() => ViewAddItem()">
                                <MudIcon Size="Size.Medium" Icon="@Icons.Material.Filled.AddCircle" />
                            </MudButton>
                        </MudTooltip>
                    }
                    @if (MudDialog != null && IsEmbedded != true && (RenderAddButton || EnableCsvExcelExport || EnablePdfExport || EnablePrint))
                    {
                        <MudDivider Vertical="true" Style="height: 60%;align-self: center;margin-inline: 5px;opacity: 0.5;"></MudDivider>
                    }

                    @if (MudDialog != null && IsEmbedded != true)
                    {
                        @ToolbarControlsTemplate

                        <MudTooltip Text="@Loc["CloseButton"]">
                            <MudButton Style="min-width:40px; z-index: 100;"
                                       Variant="Variant.Text"
                                       Size="Size.Medium"
                                       Color="NavIconFlatColor ? Color.Inherit : Color.Default"
                                       OnClick="CloseDialog">
                                <MudIcon Size="Size.Medium" Icon="@Icons.Material.Filled.Close" />
                            </MudButton>
                        </MudTooltip>
                    }

                </MudToolBar>
            }

            @HeaderTemplate
        </header>

        @if (Values == null && string.IsNullOrWhiteSpace(Action))
        {
            <MudAlert Severity="Severity.Error">Both Action and Values parameters cannot be null</MudAlert>
        }
        else
        {
            <div class="@GridContainerCssClass">
                <SfGrid DataSource="Values"
                        TValue="T"
                        @ref="Grid"
                        class="@GridCssClass"
                        style="border: 0;"
                        ID="@GridId"
                        AllowPaging="!DisablePagination && !EnableVirtualization"
                        AllowSorting="!DisableSorting"
                        AllowMultiSorting="!DisableMultiSorting"
                        AllowExcelExport="EnableCsvExcelExport"
                        AllowPdfExport="EnablePdfExport"
                        AllowFiltering="!DisableFilters"
                        Query="GridQuery"
                        AllowSelection="!DisableSelection"
                        EnableVirtualization="EnableVirtualization"
                        EnableVirtualMaskRow="EnableVirtualization"
                        Height="@GridHeight"
                        ShowColumnChooser="!DisableColumnChooser">
                
                    @if (Values == null)
                    {
                        <SfDataManager Url="@SettingManager.Configuration.ODataPath.AddUrlPath(Action)" Adaptor="Adaptors.ODataV4Adaptor" CrossDomain="true"/>
                    }
                    <GridEvents OnRecordClick="RecordClickHandler"
                                DataBound="DataBoundHandler"
                                OnActionFailure="ErrorHandler"
                                OnLoad="OnLoadHandler"
                                RowDataBound="RowBound"
                                TValue="T" />
                    <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
                    <GridSelectionSettings CheckboxOnly="true" PersistSelection="true" Type="Syncfusion.Blazor.Grids.SelectionType.Multiple"></GridSelectionSettings>

                    @if (!DisableColumnChooser)
                    {
                        <GridColumnChooserSettings>
                            <FooterTemplate>
                                @{
                                    var ctx = context as ColumnChooserFooterTemplateContext;
                                }
                                <MudButton Color="Color.Primary" OnClick="@(() => ChooseVisibleColumns(ctx))">Ok</MudButton>
                                <MudButton OnClick="@(() => RestoreColumnsDefaultVisiblity(ctx))">Restore</MudButton>
                                @*<MudButton OnClick="@(async () => await ctx.CancelAsync())">Cancel</MudButton>*@
                            </FooterTemplate>
                        </GridColumnChooserSettings>
                    }

                    @if (!EnableVirtualization)
                    {
                        <GridPageSettings PageSize="@PageSize!.Value" PageSizes="@PageSizes">
                            <Template>
                                @{
                                    var ctx = (PagerTemplateContext)context;
                                    <Pagination Context="ctx" TValue="T"></Pagination>
                                }
                            </Template>
                        </GridPageSettings>
                    }

                    <GridColumns>

                        @if (EnableVirtualization && !DisableSelection)
                        {
                            <GridColumn Type="ColumnType.CheckBox" Width="60" >
                                <HeaderTemplate/>
                            </GridColumn>
                        }
                        else if (!DisableSelection)
                        {
                            <GridColumn Type="ColumnType.CheckBox" Width="60" ></GridColumn>
                        }

                        @{
                            var idHeaderText = HeaderTexts?.GetValueOrDefault(nameof(ShiftEntityDTOBase.ID)) ?? nameof(ShiftEntityDTOBase.ID);
                        }
                        <GridColumn IsPrimaryKey="true" Visible="@ShowIDColumn" Field="@nameof(ShiftEntityDTOBase.ID)" HeaderText="@idHeaderText" AutoFit></GridColumn>

                        @foreach (var column in GeneratedColumns)
                        {
                            var label = HeaderTexts?.GetValueOrDefault(column.Label) ?? column.Label;

                            if (column.IsComplex)
                            {
                                <GridColumn HeaderText="@label" Field="@column.Field" TextAlign="TextAlign.Left" FilterSettings="FilterSettingMenu"></GridColumn>
                            }
                            else
                            {
                                <GridColumn HeaderText="@label" Field="@column.Field" TextAlign="TextAlign.Left"></GridColumn>
                            }
                        }

                        @ColumnTemplate

                        @if (!ExcludedColumns.Contains("Actions", StringComparer.CurrentCultureIgnoreCase) && ComponentType != null)
                        {
                            <GridColumn HeaderText="@Loc["ActionsColumnTitle"]"
                                        TextAlign="@TextAlign.Center"
                                        AutoFit>
                                <Template>
                                    @if (ActionsTemplate == null)
                                    {
                                        try
                                        {
                                            object? key = ((ShiftEntityDTOBase)context).ID;

                                            if (key == null)
                                            {
                                                throw new Exception();
                                            }
                                            <MudButton OnClick="@(() => ViewAddItem(key))"
                                                       Variant="@Variant.Outlined"
                                                       EndIcon="@Icons.Material.Filled.OpenInNew"
                                                       Color="@Color.Primary"
                                                       Size="@Size.Small">
                                                @Loc["ViewButton"]
                                            </MudButton>
                                        }
                                        catch (Exception)
                                        {
                                            MsgService.Error(Loc["ActionButtonError"]);
                                        }
                                    }
                                    else
                                    {
                                        @ActionsTemplate((T)context);
                                    }
                                </Template>
                            </GridColumn>
                        }
                    </GridColumns>

                    @ChildContent
                </SfGrid>

                @if (ActionUrlBroken)
                {
                    <div class="disabled-grid-overlay">
                        <MudButton Color="Color.Primary" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Refresh" OnClick="ReloadGrid">@Loc["RefreshList"]</MudButton>
                    </div>
                }
            </div>
        }

        </CascadingValue>
    </MudPaper>

    @if (IsReady)
    {
        var generatedColumnWidth = 200;
        var fixedColumnWidth = 100;
        // find how many fixed columns are visible
        var fixedColumns = Grid!.Columns
                                .Where(x => x.HeaderText == @Loc["ActionsColumnTitle"] || x.IsPrimaryKey)
                                .Where(x => x.Visible)
                                .Count();
        if (!DisableSelection)
        {
            fixedColumns++;
        }
        // find how many generated columns are visible
        var columns = Grid!.Columns.Where(x => x.Visible).Count() - fixedColumns;
        // calculate the table min-width
        var width = (fixedColumns * fixedColumnWidth) + (columns * generatedColumnWidth);
        <style>
            #@(GridId).grid-loaded.e-grid .e-table {
                min-width: @(width)px !important;
            }
        </style>
    }
}

else
{
    <MudAlert Severity="Severity.Error">@Loc["ReadAccessDenied", Title]</MudAlert>    
}
@code {
    public RenderFragment UnableToLoadDataTemplate = @<text></text>;
}