@namespace ShiftSoftware.ShiftBlazor.Components
@typeparam T where T : ShiftEntityDTOBase, new()
@typeparam TProperty
@typeparam TEntity where TEntity : ShiftEntityDTOBase, new()
@inherits PropertyColumnExtended<T, TProperty>
@implements IDisposable
@implements IODataComponent
@inject IStringLocalizer<Resources.Components.Column> Loc

@{
    base.BuildRenderTree(__builder);
}

@code {
    internal RenderFragment<CellContext<T>> _CellTemplate => context =>
    @<text>
        @if (IsReady && !FailedToLoadData)
        {
            try
            {
                var id = Misc.GetValueFromPropertyPath(context.Item, TValueField)?.ToString();
                var data = RemoteData.FirstOrDefault(x => x.ID == id);

                object? value = null;

                if (IsForbiddenStatusCode)
                {
                    value = id;
                }
                else if (data != null)
                {
                    value = Misc.GetValueFromPropertyPath(data, TEntityTextField);
                }

                if (IsButtonColumn)
                {
                    <a @onclick="() => OpenDialogForm(GetKey(context.Item))" @onclick:preventDefault="true" @onclick:stopPropagation="true" href="@GetUrl(GetKey(context.Item))">
                        @if (ButtonTemplate == null)
                        {
                            <span class="button-column-button">
                                @value
                            </span>
                        }
                        else
                        {
                            @ButtonTemplate((TProperty?)value)
                        }
                    </a>
                }
                else {
                    @value
                }
            }
            catch
            {
                <MudAlert Dense Severity="Severity.Warning">Failed to Parse</MudAlert>
            }
        }
        else if (!FailedToLoadData)
        {
            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="100%" Height="20px" />
        }
    </text>;

    internal RenderFragment<HeaderContext<T>> _HeaderTemplate => context =>
    @<text>
        <MudBadge OnClick="ShowErrorMessage"
                  BadgeClass="cursor-pointer"
                  Dot="true"
                  Color="Color.Error"
                  Origin="Origin.TopRight"
                  Visible="@FailedToLoadData">
            <MudText Class="column-header">@Title</MudText>
        </MudBadge>

        @if (Filterable ?? DataGrid?.Filterable ?? false)
        {
            <MudSpacer />
            <MudIconButton OnClick="@OpenFilter" Icon="@FilterIcon" Size="@Size.Small" />
            <MudOverlay Visible="IsFilterOpen" LockScroll="false" OnClick="@CloseFilter" />
            <MudPopover Open="IsFilterOpen" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter" Paper Elevation="8" Style="width:400px" Class="pa-4">
                <MudStack>
                    <ShiftAutocomplete BaseUrl="@this.BaseUrl"
                                       BaseUrlKey="@this.BaseUrlKey"
                                       TEntitySet="TEntity"
                                       EntitySet="@EntitySet"
                                       MultiSelect
                                       @bind-SelectedValues="FilterItems" />
                    <MudStack Row>
                        <MudSpacer />
                        <MudButton OnClick="ClearFilterAsync">@Loc["ClearFilterButton"]</MudButton>
                        <MudButton Color="@Color.Primary" OnClick="ApplyFilterAsync">@Loc["ApplyFilterButton"]</MudButton>
                    </MudStack>
                </MudStack>
            </MudPopover>
        }
    </text>;
}