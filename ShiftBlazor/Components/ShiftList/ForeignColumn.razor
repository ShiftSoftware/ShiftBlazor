@namespace ShiftSoftware.ShiftBlazor.Components
@using Microsoft.OData.Client;
@using System.Net.Http.Json;
@using System.Text.Json;
@using System.Linq.Expressions;
@using System.ComponentModel;
@using ShiftSoftware.ShiftBlazor.Events;
@typeparam T where T : ShiftEntityDTOBase, new()
@typeparam TEntity where TEntity : ShiftEntityDTOBase, new()
@typeparam TProperty
@inject HttpClient Http
@inject MessageService MessageService
@inherits PropertyColumn<T, TProperty>
@implements IDisposable

@{
    base.Sortable = false;
    base.ShowFilterIcon = false;
    base.Class = "foreign-column";
    base.CellTemplate = _CellTemplate;
    base.HeaderTemplate = _HeaderTemplate;
    base.BuildRenderTree(__builder);
}


@code {
    [CascadingParameter]
    public ShiftList<T> ShiftList { get; set; }
    
    [Browsable(false)]
    [Bindable(false)]
    [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
    [EditorBrowsable(EditorBrowsableState.Never)]
    [Obsolete("Don't use this", true)]
    public new Expression<Func<T, TProperty>> Property { get; set; }

    [Parameter]
    public Expression<Func<TEntity, TProperty>> EntityProperty { get; set; }

    [Parameter, EditorRequired]
    public ODataParameters<TEntity>? ODataParameters { get; set; }

    internal RenderFragment<CellContext<T>> _CellTemplate => context =>
    @<text>
        @if (IsReady)
        {
            var id = Misc.GetValueFromPropertyPath(context.Item, ODataParameters!.DataValueField!)?.ToString();
            var data = RemoteData.FirstOrDefault(x => x.ID == id);
            if (data != null)
            {
                <text>@Misc.GetValueFromPropertyPath(data, PropertyFieldName)</text>
            }
        }
        else
        {
            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="100%" Height="20px" />
        }
    </text>;

    internal RenderFragment<HeaderContext<T>> _HeaderTemplate => context =>
    @<text>
        <span class="column-header">@(Title ?? PropertyFieldName)</span>
        @if (Filterable ?? DataGrid?.Filterable ?? false)
        {
            <MudSpacer />
            <MudIconButton OnClick="@OpenFilter" Icon="@FilterIcon" Size="@Size.Small" />
            <MudOverlay Visible="IsFilterOpen" OnClick="@CloseFilter" />
            <MudPopover Open="IsFilterOpen" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter" Paper Elevation="8" Style="width:400px" Class="pa-4">
                     <MudStack>
                         <ShiftAutocomplete T="ShiftEntitySelectDTO" TEntitySet="TEntity" ODataParameters="ODataParameters" MultiSelect @bind-SelectedValues="FilterItems" />
                         <MudStack Row>
                         <MudSpacer />
                         <MudButton OnClick="ClearFilterAsync">Clear</MudButton>
                         <MudButton Color="@Color.Primary" OnClick="ApplyFilterAsync">Filter</MudButton>
                     </MudStack>
                 </MudStack>
             </MudPopover>
        }
            </text>
    ;

    internal bool IsReady = false;
    internal List<TEntity> RemoteData { get; set; } = new();
    internal bool IsFilterOpen = false;
    internal string FilterIcon => FilterItems.Count > 0 ? Icons.Material.Filled.FilterAlt : Icons.Material.Outlined.FilterAlt;
    internal List<ShiftEntitySelectDTO> FilterItems { get; set; } = new();

    internal string PropertyFieldName = string.Empty;

    protected override void OnInitialized()
    {
        if (ODataParameters == null)
            throw new ArgumentNullException(nameof(ODataParameters));

        if (string.IsNullOrWhiteSpace(ODataParameters.EntitySetName))
            throw new ArgumentNullException(nameof(ODataParameters.EntitySetName));

        if (string.IsNullOrWhiteSpace(ODataParameters.DataValueField))
            throw new ArgumentNullException(nameof(ODataParameters.DataValueField));

        if (EntityProperty == null && string.IsNullOrWhiteSpace(ODataParameters.DataTextField))
        {
            throw new ArgumentNullException(message: $"Both '{nameof(EntityProperty)}' and '{nameof(ODataParameters.DataTextField)}' parameters cannot be null", null);
        }

        ShiftBlazorEvents.OnBeforeGridDataBound += OnBeforeDataBound;
        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        PropertyFieldName = GetPropertyFieldName();
    }


    internal void OnBeforeDataBound(object? sender, KeyValuePair<Guid, List<object>> data)
    {
        if (ShiftList.DataGridId != data.Key)
        {
            return;
        }

        FilterItems = DataGrid.FilterDefinitions
            .Where(x => x.Column!.Identifier == Identifier)
            .Select(x => new ShiftEntitySelectDTO
            {
                Text = (string)x.Value!,

            }).ToList();

        RequestForeignData(data);
    }

    internal async void RequestForeignData(KeyValuePair<Guid, List<object>> data)
    {
        var items = data.Value;

        if (items != null && items.Count() > 0)
        {
            var itemIds = items
                .Select(x => Misc.GetValueFromPropertyPath(x, ODataParameters!.DataValueField!)?.ToString())
                .Distinct();

            if (itemIds.Count() > 0)
            {
                try
                {
                    var queryBuilder = ODataParameters!.QueryBuilder;
                    queryBuilder = queryBuilder.AddQueryOption("$select", $"{ODataParameters!.DataValueField},{PropertyFieldName}");
                    var url = queryBuilder.Where(x => itemIds.Contains(x.ID)).ToString();
                    var result = await Http.GetFromJsonAsync<ODataDTO<TEntity>>(url);

                    if (result != null)
                    {
                        RemoteData = result.Value;
                    }
                }
                catch (Exception)
                {
                    MessageService.Error("Could not load column");
                }
            }
        }
        IsReady = true;
        ShiftList.GridStateHasChanged();
    }

    private string GetPropertyFieldName()
    {
        string? propertyName;
        if (PropertyName != null && !Guid.TryParse(PropertyName, out _))
        {
            propertyName = ODataParameters!.DataTextField = Misc.GetFieldFromPropertyPath(PropertyName);
        }
        else
        {
            propertyName = ODataParameters!.DataTextField;
        }

        if (string.IsNullOrWhiteSpace(propertyName))
            throw new Exception(message: $"'{nameof(ODataParameters.DataTextField)}' cannot be null when '{nameof(EntityProperty)}' is null or a dynamic expression");

        return propertyName;
    }

    private async Task ClearFilterAsync()
    {
        DataGrid.FilterDefinitions.RemoveAll(x => x.Column!.Identifier == Identifier);
        FilterItems.Clear();
        await DataGrid.ReloadServerData();
        CloseFilter();
    }

    private async Task ApplyFilterAsync()
    {
        var filterDefinitions = FilterItems.Select(x => new FilterDefinition<T>
        {
            Column = this,
            Operator = FilterOperator.String.Equal,
            Title = PropertyFieldName,
            Value = x.Text,
        });


        DataGrid.FilterDefinitions.RemoveAll(x => x.Column!.Identifier == Identifier);
        DataGrid.FilterDefinitions.AddRange(filterDefinitions);
        FilterItems.Clear();
        await DataGrid!.ReloadServerData();
        CloseFilter();
    }

    private void OpenFilter()
    {
        IsFilterOpen = true;
        ShiftList.GridStateHasChanged();
    }

    private void CloseFilter()
    {
        IsFilterOpen = false;
        ShiftList.GridStateHasChanged();
    }

    void IDisposable.Dispose()
    {
        ShiftBlazorEvents.OnBeforeGridDataBound -= OnBeforeDataBound;
    }
}