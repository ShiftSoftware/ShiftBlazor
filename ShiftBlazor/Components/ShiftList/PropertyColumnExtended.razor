@namespace ShiftSoftware.ShiftBlazor.Components
@using System.Text.RegularExpressions
@typeparam T where T : ShiftEntityDTOBase, new()
@typeparam TProperty
@inherits PropertyColumn<T, TProperty>
@inject ShiftModal ShiftModal

@{
    base.BuildRenderTree(__builder);
}

@code {
    [CascadingParameter]
    public ShiftList<T> ShiftList { get; set; } = default!;

    [Parameter]
    public bool IsButtonColumn { get; set; }

    [Parameter]
    public Type? ComponentType { get; set; }

    [Parameter]
    public Enums.ModalOpenMode OpenMode { get; set; } = Enums.ModalOpenMode.Popup;

    [Parameter]
    public Dictionary<string, object>? FormParameters { get; set; }

    [Parameter]
    public RenderFragment<TProperty?>? ButtonTemplate { get; set; }

    [Parameter]
    public string? KeyPropertyName { get; set; }

    protected Type? FormComponent => ComponentType ?? ShiftList.ComponentType;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (IsButtonColumn)
        {
            base.CellTemplate = Template;
        }
    }

    protected string? GetKey(T item)
    {
        if (KeyPropertyName != null)
        {
            return item.GetType().GetProperty(KeyPropertyName)?.GetValue(item) as string;
        }

        return item.ID;
    }

    protected string GetUrl(string? id)
    {
        var attr = Misc.GetAttribute<RouteAttribute>(FormComponent);

        if (attr != null)
        {
            var path = Regex.Replace(attr.Template, "\\{.+\\}", id ?? "");
            return path + ShiftModal.GenerateQueryString(FormParameters);
        }
        return "";
    }

    protected async Task OpenDialogForm(string? id)
    {
        if (FormComponent == null) return;

        await ShiftList.OpenDialog(FormComponent, id, OpenMode, FormParameters);
    }

    public RenderFragment<CellContext<T>> Template => (context) =>
    @<a @onclick="() => OpenDialogForm(GetKey(context.Item))" @onclick:preventDefault="true" @onclick:stopPropagation="true" href="@GetUrl(GetKey(context.Item))">
        @if (ButtonTemplate == null)
        {
            <span class="button-column-button">
                @base.CellContent(context.Item)
            </span>
        }
        else
        {
            @ButtonTemplate((TProperty?)base.CellContent(context.Item))
        }
    </a>;
}