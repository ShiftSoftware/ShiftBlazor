@using ShiftSoftware.ShiftEntity.Model
@inherits FilterInput

<MudField Variant="Variant.Outlined" Label="@Name">

	@if (FilterPanel == null)
	{
		<MudAlert>Filter could not be loaded</MudAlert>
	}
	else
	{
		<MudStack Row AlignItems="AlignItems.End" Spacing="2">
			<MudSelectExtended T="ODataOperator" ValueChanged="OnOperatorChanged" Label="Operator">
				<MudSelectItem Value="ODataOperator.Equal">Equal</MudSelectItem>
				<MudSelectItem Value="ODataOperator.StartsWith">Starts With</MudSelectItem>
				<MudSelectItem Value="ODataOperator.EndsWith">Ends With</MudSelectItem>
				<MudSelectItem Value="ODataOperator.Contains">Contains</MudSelectItem>
				<MudSelectItem Value="ODataOperator.NotEqual">Not Equal</MudSelectItem>
				<MudSelectItem Value="ODataOperator.NotContains">Not Contains</MudSelectItem>
			</MudSelectExtended>

			@if (AutoCompleteType == null || AutoCompleteParameters == null)
			{
				<MudTextField T="string" Label="Value" ValueChanged="ValueChanged"></MudTextField>
			}
			else
			{
				<DynamicComponent Type="AutoCompleteType" Parameters="AutoCompleteParameters" />
			}

		</MudStack>
	}

</MudField>

@code
{
	[Parameter]
	public Type? DtoType { get; set; }

	[CascadingParameter]
	public IShiftList? ShiftList { get; set; }

	private string? Value { get; set; }
	private ODataOperator SelectedOperator { get; set; }

	private Type? AutoCompleteType;
	private Dictionary<string, object>? AutoCompleteParameters;

	protected override void OnInitialized()
	{
		if (DtoType != null
			&& Misc.GetAttribute<ShiftEntityKeyAndNameAttribute>(DtoType) != null
			&& !string.IsNullOrWhiteSpace(ShiftList?.EntitySet))
		{
			AutoCompleteType = typeof(ShiftAutocomplete<>).MakeGenericType(DtoType);
			AutoCompleteParameters = new()
			{
				["EntitySet"] = ShiftList.EntitySet,
				["DataTextField"] = Name,
				["ValueChanged"] = new EventCallback<ShiftEntitySelectDTO>(this, AutocompleteChanged)
			};
		}
	}

	private void AutocompleteChanged(ShiftEntitySelectDTO? dto) {
		ValueChanged(dto?.Text);
	}

	private void ValueChanged(string value)
	{
		Value = value;
		SetODataFilter();
	}

	private void SetODataFilter()
	{
		if (Value == null)
		{
			ClearFilter();
		}
		else
		{
		var filter = new ODataFilter
		{
			Field = Name,
			Operator = SelectedOperator,
				Value = Value
		};

		SetFilter(filter);
	}
	}

	private void OnOperatorChanged(ODataOperator value)
	{
		SelectedOperator = value;
		SetODataFilter();
	}
}