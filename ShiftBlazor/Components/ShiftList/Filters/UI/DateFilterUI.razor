@using System.Globalization
@using ShiftSoftware.ShiftBlazor.Components.ShiftList.Filters.Models
@inherits FilterUIBase

@if (Filter is DateFilterModel dateFilter)
{
	<MudSelectExtended T="ODataOperator" Value="Filter.Operator" ValueChanged="OperatorChanged" Label="Operator">
		<MudSelectItem Value="ODataOperator.Equal">Is</MudSelectItem>
		<MudSelectItem Value="ODataOperator.NotEqual">Is Not</MudSelectItem>
		<MudSelectItem Value="ODataOperator.IsNotEmpty">Is Set</MudSelectItem>
		<MudSelectItem Value="ODataOperator.IsEmpty">Is Not Set</MudSelectItem>
	</MudSelectExtended>

	@if (Filter.Operator == ODataOperator.Equal || Filter.Operator == ODataOperator.NotEqual)
	{
		<MudSelectExtended T="DateFilterOperator?" Clearable Value="dateFilter.SelectedDateOperator" ValueChanged="OnDateOperatorChanged" Label="Value">
			@foreach (var item in Enum.GetValues<DateFilterOperator>())
			{
				<MudSelectItem T="DateFilterOperator?" Value="item">@item.ToString()</MudSelectItem>
			}
		</MudSelectExtended>

		@if (dateFilter.SelectedDateOperator == DateFilterOperator.Last || dateFilter.SelectedDateOperator == DateFilterOperator.Next)
		{
			<MudNumericField T="int" Value="dateFilter.UnitValue" ValueChanged="OnTimeUnitValueChanged" Min="1"></MudNumericField>
			<MudSelectExtended T="TimeUnit" Value="dateFilter.SelectedTimeUnit" ValueChanged="OnTimeUnitChanged">
				@foreach (var item in Enum.GetValues<TimeUnit>())
				{
					<MudSelectItem Value="item">@item.ToString()</MudSelectItem>
				}
			</MudSelectExtended>
		}
		else if (dateFilter.SelectedDateOperator == DateFilterOperator.Date || dateFilter.SelectedDateOperator == DateFilterOperator.After || dateFilter.SelectedDateOperator == DateFilterOperator.Before)
		{
			<MudDatePicker Date="dateFilter.DateTimeValue" DateChanged="OnDateTimeValueChanged" />
		}
		else if (dateFilter.SelectedDateOperator == DateFilterOperator.Range)
		{
			<MudDateRangePicker DateRange="dateFilter.DateRangeValue" DateRangeChanged="OnDateRangeValueChanged" />
		}
	}
}

@code {

	#region Operator Changed

	private void OnDateOperatorChanged(DateFilterOperator? value)
	{
		if (Filter is DateFilterModel dateFilter)
		{
			dateFilter.SelectedDateOperator = value;
			UpdateFilter();
		}
	}

	private void OnTimeUnitChanged(TimeUnit value)
	{
		if (Filter is DateFilterModel dateFilter)
		{
			dateFilter.SelectedTimeUnit = value;
			UpdateFilter();
		}
	}

	private void OnTimeUnitValueChanged(int value)
	{
		if (Filter is DateFilterModel dateFilter)
		{
			dateFilter.UnitValue = value;
			UpdateFilter();
		}
	}

	private void OnDateTimeValueChanged(DateTime? value)
	{
		if (Filter is DateFilterModel dateFilter)
		{
			dateFilter.DateTimeValue = value;
			UpdateFilter();
		}
	}

	private void OnDateRangeValueChanged(DateRange value)
	{
		if (Filter is DateFilterModel dateFilter)
		{
			dateFilter.DateRangeValue = value;
			UpdateFilter();
		}
	}
	#endregion

}