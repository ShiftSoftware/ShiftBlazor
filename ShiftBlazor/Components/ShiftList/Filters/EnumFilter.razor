@using System.Text.Json
@inherits FilterInput

@if (IsHidden)
{
	<MudField Variant="Variant.Outlined" Label="@Name" Disabled="Disabled">

		@if (FilterPanel == null || EnumTypeToUse == null)
		{
			<MudAlert>Filter could not be loaded</MudAlert>
		}
		else
		{
			<CascadingValue Name="@FormHelper.ParentDisabledName" Value="Disabled">
				<MudStack Row AlignItems="AlignItems.End" Spacing="2">
					<MudSelectExtended T="ODataOperator" Label="Operator" Value="SelectedOperator" ValueChanged="OnOperatorChanged">
						<MudSelectItem Value="ODataOperator.Equal">Equal</MudSelectItem>
						<MudSelectItem Value="ODataOperator.NotEqual">Not Equal</MudSelectItem>
					</MudSelectExtended>

					<MudSelectExtended T="object" Label="Value" Value="Value" ValueChanged="OnValueChanged">
						@foreach (var item in Enum.GetValues(EnumTypeToUse))
						{
							<MudSelectItem Value="@item">@item</MudSelectItem>
						}
					</MudSelectExtended>

				</MudStack>
			</CascadingValue>
		}
	</MudField>
}

@code {
	[Parameter]
	public Type? EnumType { get; set; }
	[Parameter]
	public object? Value { get; set; }
	[Parameter]
	public ODataOperator SelectedOperator { get; set; }

	private Type? EnumTypeToUse;

	protected override void OnInitialized()
	{
		base.OnInitialized();

		if (EnumType != null)
		{
			EnumTypeToUse = EnumType.IsEnum ? EnumType : Nullable.GetUnderlyingType(EnumType);
		}
	}

	private void OnOperatorChanged(ODataOperator value)
	{
		SelectedOperator = value;
		SetODataFilter();
	}

	public override void SetODataFilter()
	{
		var filter = new ODataFilter
		{
			Field = Name,
			Operator = SelectedOperator,
			Value = Value
		};

		SetFilter(filter);
	}

	private void OnValueChanged(object value)
	{
		Value = value;
		SetODataFilter();
	}
}
