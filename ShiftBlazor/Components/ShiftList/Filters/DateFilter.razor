@using System.Globalization
@inherits FilterInput

@if (!IsHidden)
{
	<MudField Variant="Variant.Outlined" Label="@Name" Disabled="Disabled">

		@if (FilterPanel == null)
		{
			<MudAlert>Filter could not be loaded</MudAlert>
		}
		else
		{
			<CascadingValue Name="@FormHelper.ParentDisabledName" Value="Disabled">
				<MudStack Row AlignItems="AlignItems.End" Spacing="2">

					<MudSelectExtended T="ODataOperator" Value="SelectedOperator" ValueChanged="OnOperatorChanged" Label="Operator">
						<MudSelectItem Value="ODataOperator.Equal">Is</MudSelectItem>
						<MudSelectItem Value="ODataOperator.NotEqual">Is Not</MudSelectItem>
						<MudSelectItem Value="ODataOperator.IsNotEmpty">Is Set</MudSelectItem>
						<MudSelectItem Value="ODataOperator.IsEmpty">Is Not Set</MudSelectItem>
					</MudSelectExtended>

					@if (SelectedOperator == ODataOperator.Equal || SelectedOperator == ODataOperator.NotEqual)
					{
						<MudSelectExtended T="DateOperator?" Clearable Value="SelectedDateOperator" ValueChanged="OnDateOperatorChanged" Label="Value">
							@foreach (var item in Enum.GetValues<DateOperator>())
							{
								<MudSelectItem T="DateOperator?" Value="item">@item.ToString()</MudSelectItem>
							}
						</MudSelectExtended>

						@if (SelectedDateOperator == DateOperator.Last || SelectedDateOperator == DateOperator.Next)
						{
							<MudNumericField T="int" Value="UnitValue" ValueChanged="OnTimeUnitValueChanged" Min="1"></MudNumericField>
							<MudSelectExtended T="TimeUnit" Value="SelectedTimeUnit" ValueChanged="OnTimeUnitChanged">
								@foreach (var item in Enum.GetValues<TimeUnit>())
								{
									<MudSelectItem Value="item">@item.ToString()</MudSelectItem>
								}
							</MudSelectExtended>
						}
						else if (SelectedDateOperator == DateOperator.Date || SelectedDateOperator == DateOperator.After || SelectedDateOperator == DateOperator.Before)
						{
							<MudDatePicker Date="DateTimeValue" DateChanged="OnDateTimeValueChanged" />
						}
						else if (SelectedDateOperator == DateOperator.Range)
						{
							<MudDateRangePicker DateRange="DateRangeValue" DateRangeChanged="OnDateRangeValueChanged" />
						}
					}

				</MudStack>
			</CascadingValue>
		}

	</MudField>
}

@code {
	[Parameter]
	public ODataOperator SelectedOperator { get; set; }
	[Parameter]
	public DateOperator? SelectedDateOperator { get; set; }
	[Parameter]
	public TimeUnit SelectedTimeUnit { get; set; }
	[Parameter]
	public DateTime? DateTimeValue { get; set; } = DateTime.Now;
	[Parameter]
	public DateRange? DateRangeValue { get; set; }
	[Parameter]
	public int UnitValue { get; set; } = 1;

	private void SetDateRange(DateTime start, DateTime end)
	{
		var filterStart = new ODataFilter
		{
			Field = Name,
			Operator = ODataOperator.GreaterThanOrEqual,
			Value = start
		};

		var filterEnd = new ODataFilter
		{
			Field = Name,
			Operator = ODataOperator.LessThan,
			Value = end
		};

		if (SelectedOperator == ODataOperator.NotEqual)
		{
			filterStart.Value = end;
			filterEnd.Value = start;
		}

		SetFilter(filterStart, filterEnd);
	}

	private void IsSet(bool isSetNull)
	{
		SelectedDateOperator = null;
		var filter = new ODataFilter
		{
			Field = Name,
			Operator = isSetNull ? ODataOperator.IsEmpty : ODataOperator.IsNotEmpty
		};

		SetFilter(filter);
	}

	private (DateTime, DateTime) GetLastOrNextDateRange(int start, int end = 1, TimeUnit unit = TimeUnit.Day)
	{
		DateTime valueStart = default;
		DateTime valueEnd = default;

		switch (unit)
		{
			case TimeUnit.Day:
				valueStart = DateTime.Today.AddDays(start);
				valueEnd = valueStart.AddDays(end);
				break;
			case TimeUnit.Week:
				var startOfWeek = CultureInfo.CurrentCulture.DateTimeFormat.FirstDayOfWeek;
				int diff = (7 + (DateTime.Today.DayOfWeek - startOfWeek)) % 7;
				valueStart = DateTime.Today.AddDays(-1 * diff).AddDays(start * 7);
				valueEnd = valueStart.AddDays(7 * end);
				break;
			case TimeUnit.Month:
				valueStart = new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1).AddMonths(start);
				valueEnd = valueStart.AddMonths(end);
				break;
			case TimeUnit.Year:
				valueStart = new DateTime(DateTime.Today.Year, 1, 1).AddYears(start);
				valueEnd = valueStart.AddYears(end);
				break;
		}

		return (valueStart, valueEnd);
	}

	public override void SetODataFilter()
	{
		DateTime valueStart = default;
		DateTime valueEnd = default;

		if (SelectedOperator == ODataOperator.Equal || SelectedOperator == ODataOperator.NotEqual)
		{
			if (SelectedDateOperator == null)
			{
				ClearFilter();
				return;
			}

			(valueStart, valueEnd) = SelectedDateOperator switch
			{
				DateOperator.Today => GetLastOrNextDateRange(0),
				DateOperator.Torrorrow => GetLastOrNextDateRange(1),
				DateOperator.Yesterday => GetLastOrNextDateRange(-1),
				DateOperator.Next7Days => GetLastOrNextDateRange(1, 7),
				DateOperator.Previous7Days => GetLastOrNextDateRange(-7, 7),
				DateOperator.LastWeek => GetLastOrNextDateRange(-1, unit: TimeUnit.Week),
				DateOperator.ThisWeek => GetLastOrNextDateRange(0, unit: TimeUnit.Week),
				DateOperator.NextWeek => GetLastOrNextDateRange(1, unit: TimeUnit.Week),
				DateOperator.LastMonth => GetLastOrNextDateRange(-1, unit: TimeUnit.Month),
				DateOperator.ThisMonth => GetLastOrNextDateRange(0, unit: TimeUnit.Month),
				DateOperator.NextMonth => GetLastOrNextDateRange(1, unit: TimeUnit.Month),
				DateOperator.LastYear => GetLastOrNextDateRange(-1, unit: TimeUnit.Year),
				DateOperator.ThisYear => GetLastOrNextDateRange(0, unit: TimeUnit.Year),
				DateOperator.NextYear => GetLastOrNextDateRange(1, unit: TimeUnit.Year),
				DateOperator.Last => GetLastOrNextDateRange(UnitValue * -1, UnitValue, SelectedTimeUnit),
				DateOperator.Next => GetLastOrNextDateRange(1, UnitValue, SelectedTimeUnit),
				DateOperator.Date => (DateTimeValue ?? DateTime.Today, (DateTimeValue ?? DateTime.Today).AddDays(1)),
				DateOperator.Before => (DateTime.MinValue.ToUniversalTime(), DateTimeValue ?? DateTime.Today),
				DateOperator.After => (DateTimeValue ?? DateTime.Today, DateTime.MaxValue.ToUniversalTime()),
				DateOperator.Range => (DateRangeValue?.Start ?? DateTime.Today, (DateRangeValue?.End ?? DateTime.Today).AddDays(1)),
				_ => (default, default)
			};

			if (valueStart != default || valueEnd != default)
			{
				SetDateRange(valueStart, valueEnd);
			}
		}
		else
		{
			IsSet(SelectedOperator == ODataOperator.IsEmpty);
		}
	}

	#region Operator Changed
	private void OnOperatorChanged(ODataOperator value)
	{
		SelectedOperator = value;
		SetODataFilter();
	}

	private void OnDateOperatorChanged(DateOperator? value)
	{
		SelectedDateOperator = value;
		SetODataFilter();
	}

	private void OnTimeUnitChanged(TimeUnit value)
	{
		SelectedTimeUnit = value;
		SetODataFilter();
	}

	private void OnTimeUnitValueChanged(int value)
	{
		UnitValue = value;
		SetODataFilter();
	}

	private void OnDateTimeValueChanged(DateTime? value)
	{
		DateTimeValue = value;
		SetODataFilter();
	}

	private void OnDateRangeValueChanged(DateRange value)
	{
		DateRangeValue = value;
		SetODataFilter();
	}
	#endregion

	public enum DateOperator
	{
		Today,
		Yesterday,
		Torrorrow,
		Next7Days,
		Previous7Days,
		LastWeek,
		ThisWeek,
		NextWeek,
		LastMonth,
		ThisMonth,
		NextMonth,
		LastYear,
		ThisYear,
		NextYear,
		Last,
		Next,
		Date,
		Before,
		After,
		Range,
	}
	
	public enum TimeUnit
	{
		Day,
		Week,
		Month,
		Year,
	}
}