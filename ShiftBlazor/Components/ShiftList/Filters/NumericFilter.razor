@inherits FilterInput

@if (!IsHidden)
{

	<MudField Variant="Variant.Outlined" Label="@Name" Class="@ClassName" Disabled="Disabled">

		@if (FilterPanel == null)
		{
			<MudAlert>Filter could not be loaded</MudAlert>
		}
		else
		{
			<CascadingValue Name="@FormHelper.ParentDisabledName" Value="Disabled">
				<MudStack Row AlignItems="AlignItems.End" Spacing="2">
					<MudSelectExtended T="ODataOperator" Value="SelectedOperator" ValueChanged="OnOperatorChanged" Label="Operator">
						<MudSelectItem Value="ODataOperator.Equal">Is</MudSelectItem>
						<MudSelectItem Value="ODataOperator.IsNotEmpty">IsSet</MudSelectItem>
						<MudSelectItem Value="ODataOperator.IsEmpty">IsNotSet</MudSelectItem>
					</MudSelectExtended>

					<MudSelectExtended T="NumOperator?" Value="SelectedNumOperator" ValueChanged="OnNumOperatorChanged">
						<MudSelectItem T="NumOperator?" Value="NumOperator.Positive">Positive</MudSelectItem>
						<MudSelectItem T="NumOperator?" Value="NumOperator.Negative">Negative</MudSelectItem>
						@if (!IsDouble)
						{
							<MudSelectItem T="NumOperator?" Value="NumOperator.Even">Even</MudSelectItem>
							<MudSelectItem T="NumOperator?" Value="NumOperator.Odd">Odd</MudSelectItem>
						}
						<MudSelectItem T="NumOperator?" Value="NumOperator.WholeNumbers">WholeNumbers</MudSelectItem>
						<MudSelectItem T="NumOperator?" Value="NumOperator.Equal">Equal</MudSelectItem>
						<MudSelectItem T="NumOperator?" Value="NumOperator.NotEqual">NotEqual</MudSelectItem>
						<MudSelectItem T="NumOperator?" Value="NumOperator.GreaterThan">GreaterThan</MudSelectItem>
						<MudSelectItem T="NumOperator?" Value="NumOperator.GreaterThanOrEqual">GreaterThanOrEqual</MudSelectItem>
						<MudSelectItem T="NumOperator?" Value="NumOperator.LessThan">LessThan</MudSelectItem>
						<MudSelectItem T="NumOperator?" Value="NumOperator.LessThanOrEqual">LessThanOrEqual</MudSelectItem>
						<MudSelectItem T="NumOperator?" Value="NumOperator.Between">Between</MudSelectItem>
						@if (!IsDouble)
						{
							<MudSelectItem T="NumOperator?" Value="NumOperator.MultipleOf">MultipleOf</MudSelectItem>
						}
						<MudSelectItem T="NumOperator?" Value="NumOperator.StartsWith">StartsWith</MudSelectItem>
						<MudSelectItem T="NumOperator?" Value="NumOperator.EndsWith">EndsWith</MudSelectItem>
						<MudSelectItem T="NumOperator?" Value="NumOperator.PercentageOf">PercentageOf</MudSelectItem>
					</MudSelectExtended>

					@if (SelectedNumOperator == NumOperator.PercentageOf)
					{
						<MudNumericField
							T="double"
							Label="Percentage"
							Class="percent-input"
							MaxLength="3"
							Max="100"
							Min="0"
							Adornment="Adornment.End"
							AdornmentIcon="@Icons.Material.Filled.Percent"
							Value="PercentValue"
							ValueChanged="PercentValueChanged"/>
					}
					@if (SelectedNumOperator >= NumOperator.Equal)
					{
						<MudNumericField T="double" Label="Value" Value="Value" ValueChanged="ValueChanged"/>
					}
					@if (SelectedNumOperator == NumOperator.Between)
					{
						<MudNumericField T="double" Label="Value" Value="Value2" ValueChanged="Value2Changed"/>
					}
				</MudStack>
			</CascadingValue>
		}
	</MudField>
}

@code {

	[Parameter]
	public double Value { get; set; }
	[Parameter]
	public double Value2 { get; set; }
	[Parameter]
	public double PercentValue { get; set; }
	[Parameter]
	public ODataOperator SelectedOperator { get; set; }
	[Parameter]
	public NumOperator? SelectedNumOperator { get; set; }

	// Even and Odd don't really work for floating numbers
	private bool IsDouble => FieldType == typeof(double) || Nullable.GetUnderlyingType(FieldType) == typeof(double);

	private void PercentValueChanged(double value)
	{
		PercentValue = value;
		SetODataFilter();
	}

	private void ValueChanged(double value)
	{
		Value = value;
		SetODataFilter();
	}

	private void Value2Changed(double value)
	{
		Value2 = value;
		SetODataFilter();
	}

	public override void SetODataFilter()
	{
		var op = ODataOperator.Equal;
		object value = 0;
		var castType = string.Empty;
		var stringFilter = string.Empty;

		if (SelectedOperator == ODataOperator.Equal)
		{
			if (SelectedNumOperator == NumOperator.Positive)
			{
				op = ODataOperator.GreaterThan;
			}
			else if (SelectedNumOperator == NumOperator.Negative)
			{
				op = ODataOperator.LessThan;
			}
			else if (SelectedNumOperator == NumOperator.Even)
			{
				stringFilter = $"{Name} mod 2 eq 0";
			}
			else if (SelectedNumOperator == NumOperator.Odd)
			{
				stringFilter = $"{Name} mod 2 eq 1";
			}
			else if (SelectedNumOperator == NumOperator.WholeNumbers)
			{
				stringFilter = $"floor({Name}) eq {Name}";
			}
			else if (SelectedNumOperator == NumOperator.Equal)
			{
				value = Value;
			}
			else if (SelectedNumOperator == NumOperator.NotEqual)
			{
				op = ODataOperator.NotEqual;
				value = Value;
			}
			else if (SelectedNumOperator == NumOperator.GreaterThan)
			{
				op = ODataOperator.GreaterThan;
				value = Value;
			}
			else if (SelectedNumOperator == NumOperator.GreaterThanOrEqual)
			{
				op = ODataOperator.GreaterThanOrEqual;
				value = Value;
			}
			else if (SelectedNumOperator == NumOperator.LessThan)
			{
				op = ODataOperator.LessThan;
				value = Value;
			}
			else if (SelectedNumOperator == NumOperator.LessThanOrEqual)
			{
				op = ODataOperator.LessThanOrEqual;
				value = Value;
			}
			else if (SelectedNumOperator == NumOperator.Between)
			{
				stringFilter = $"{Name} gt {Value} and {Name} lt {Value2}";
			}
			else if (SelectedNumOperator == NumOperator.MultipleOf)
			{
				stringFilter = $"cast({Name}, Edm.Decimal) mod {Value} eq 0";
			}
			else if (SelectedNumOperator == NumOperator.StartsWith)
			{
				op = ODataOperator.StartsWith;
				value = Value.ToString();
				castType = ODataPrimitiveTypes.String;
			}
			else if (SelectedNumOperator == NumOperator.EndsWith)
			{
				op = ODataOperator.EndsWith;
				value = Value.ToString();
				castType = ODataPrimitiveTypes.String;
			}
			else if (SelectedNumOperator == NumOperator.PercentageOf)
			{
				stringFilter = $"{Name} mul {PercentValue / 100} le {Value}";
			}
		}

		if (string.IsNullOrWhiteSpace(stringFilter))
		{
			var filter = new ODataFilter
			{
				Field = Name,
				Operator = op,
				Value = value,
				CastToType = castType
			};
			SetFilter(filter);
		}
		else
		{
			SetFilter(stringFilter);
		}
	}

	private void OnOperatorChanged(ODataOperator value)
	{
		SelectedOperator = value;
		SetODataFilter();
	}

	private void OnNumOperatorChanged(NumOperator? value)
	{
		SelectedNumOperator = value;
		SetODataFilter();
	}

	public enum NumOperator
	{
		Positive,
		Negative,
		Even,
		Odd,
		WholeNumbers,
		Equal,
		NotEqual,
		GreaterThan,
		LessThan,
		GreaterThanOrEqual,
		LessThanOrEqual,
		Between,
		MultipleOf,
		EndsWith,
		StartsWith,
		PercentageOf,
	}
}
