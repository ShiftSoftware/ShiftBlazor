@using Syncfusion.Blazor.Navigations
@typeparam TValue where TValue : ShiftEntityDTOBase, new()
@inject IStringLocalizer<Resources.Components.ShiftList> Loc
@namespace ShiftSoftware.ShiftBlazor.Components

<MudToolBar Dense="true" DisableGutters="false" Class="my-4" Style="display: flex; overflow: hidden;" WrapContent="true">
    
    <MudPagination Count="Context?.TotalPages ?? 1"
                   BoundaryCount="1"
                   MiddleCount="5"
                   ShowFirstButton="true"
                   ShowLastButton="true"
                   @bind-Selected="CurrentPage" />

    <MudSpacer />

    @if (!ShiftList.DisableSelection)
    {
        <MudChip Style="display: inline-flex;" Icon="@Icons.Material.Rounded.Check" title="Selected Items">@(ShiftList.SelectedItems.All ? "All" : ShiftList.SelectedItems?.Items?.Count ?? 0)</MudChip>
    }
    
    <MudMenu AnchorOrigin="Origin.BottomLeft">
        <ActivatorContent>
            <MudChip Style="display: inline-flex;" Icon="@Icons.Material.Rounded.List" title="Items Per Page">@ShiftList.PageSize!.Value</MudChip>
        </ActivatorContent>
        <ChildContent>
            @foreach (var size in ShiftList.PageSizes)
            {
                <MudMenuItem OnClick="() => { ShiftList.PageSizeChangeHandler(size);}">@size</MudMenuItem>
            }
        </ChildContent>
    </MudMenu>

    <MudChip Style="display: inline-flex;" Icon="@Icons.Material.Rounded.Spoke" title="Total Items">@Context?.TotalItemsCount</MudChip>
</MudToolBar>

<style>
    .e-pager .mud-select {
        display: block;
    }
</style>

@code {
    [CascadingParameter]
    public ShiftList<TValue> ShiftList { get; set; } = default!;

    [Parameter]
    public PagerTemplateContext? Context { get; set; }

    private SelectedItems<string>? SelectedItems { get; set; }

    private int CurrentPage
    { 
        get
        {
            return ShiftList!.Grid!.PageSettings.CurrentPage;
        }
        set
        {
            _ = ShiftList!.Grid!.GoToPageAsync(value);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        SelectedItems = await ShiftList.GetSelectedItems();
    }
}