@using System.Text.Json
@inject SettingManager SettingManager

<MudThemeProvider @bind-IsDarkMode="IsDarkMode"
                  DefaultScrollbar="@DefaultScrollbar"
                  Theme="Theme" />
<MudDialogProvider CloseButton="_DialogOptions.CloseButton"
                   Position="_DialogOptions.Position"
                   CloseOnEscapeKey="_DialogOptions.CloseOnEscapeKey"
                   BackdropClick="_DialogOptions.BackdropClick"
                   FullWidth="_DialogOptions.FullWidth"
                   MaxWidth="_DialogOptions.MaxWidth"
                   NoHeader="_DialogOptions.NoHeader"
                   BackgroundClass="_DialogOptions.BackgroundClass"
                   />
<MudPopoverProvider />
<MudSnackbarProvider />

@code {

    [Parameter]
    public bool IsDarkMode { get; set; }

    [Parameter]
    public EventCallback<bool> IsDarkModeChanged { get; set; }

    [Parameter]
    public bool DefaultScrollbar { get; set; }

    [Parameter]
    public MudTheme? Theme { get; set; } = new();

    [Parameter]
    public DialogOptions? DialogOptions { get; set; }

    private DialogOptions _DialogOptions = new();

    protected override void OnInitialized()
    {
        _DialogOptions = new DialogOptions()
        {
            CloseOnEscapeKey = DialogOptions?.CloseOnEscapeKey ?? true,
            BackdropClick = DialogOptions?.BackdropClick ?? false,
            FullWidth = DialogOptions?.FullWidth ?? true,
            NoHeader = DialogOptions?.NoHeader ?? false,
            CloseButton = DialogOptions?.CloseButton ?? true,
            BackgroundClass = DialogOptions?.BackgroundClass,
            Position = SettingManager.Settings.ModalPosition ?? DialogOptions?.Position ?? DefaultAppSetting.ModalPosition,
            MaxWidth = SettingManager.Settings.ModalWidth ?? DialogOptions?.MaxWidth ?? DefaultAppSetting.ModalWidth,
        };

    }
}