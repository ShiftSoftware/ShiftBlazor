@typeparam T where T : ShiftEntityDTO, new()
@inherits ShiftFormBasic<T>
@using static Utils.Form

@{
    base.BuildRenderTree(__builder);
}

@code {

    private RenderFragment PrintButton
    {
        get =>
            @<MudTooltip Text="@Loc["Print"]">
                <MudButton Style="min-width:40px;"
                           Color="Color.Warning"
                           Variant="Variant.Text"
                           Size="Size.Medium"
                           Disabled="DisablePrint || Mode > Modes.Archive || TaskInProgress != Tasks.None"
                           OnClick="PrintItem">
                    @if (TaskInProgress == Tasks.Print)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    }
                    else
                    {
                        <MudIcon Size="Size.Medium" Icon="@Icons.Material.Filled.Print" />
                    }
                </MudButton>
            </MudTooltip>;
    }

    private RenderFragment DeleteButton
    {
        get =>
            @<MudTooltip Text="@Loc["Delete"]">
                <MudButton Style="min-width:40px;"
                           Disabled="DisableDelete || Mode > Modes.View || TaskInProgress != Tasks.None"
                           Variant="Variant.Text"
                           Size="Size.Medium"
                           Color="Color.Error"
                           OnClick="DeleteItem">
                    @if (TaskInProgress == Tasks.Delete)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    }
                    else
                    {
                        <MudIcon Size="Size.Medium" Icon="@Icons.Material.Filled.DeleteForever" />
                    }
                </MudButton>
            </MudTooltip>;
    }

    private RenderFragment EditButton
    {
        get =>
            @<MudTooltip Text="@Loc["Edit"]">
                <MudButton Style="min-width:40px;"
                           Disabled="DisableEdit || Mode > Modes.View || TaskInProgress != Tasks.None"
                           Variant="Variant.Text"
                           Size="Size.Medium"
                           Color="Color.Primary"
                           OnClick="EditItem">
                    <MudIcon Size="Size.Medium" Icon="@Icons.Material.Filled.Edit" />
                </MudButton>
            </MudTooltip>;
    }

    private RenderFragment RevisionButton
    {
        get =>
            @<MudTooltip Text="@Loc["Revisions"]">
                <MudButton Style="min-width:40px;"
                           Disabled="DisableRevisions || Mode > Modes.Archive || TaskInProgress != Tasks.None"
                           Variant="Variant.Text"
                           Size="Size.Medium"
                           Color="Color.Warning"
                           OnClick="ViewRevisions">
                    @if (TaskInProgress == Tasks.FetchRevisions)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    }
                    else
                    {
                        <MudIcon Size="Size.Medium" Icon="@Icons.Material.Filled.History" />
                    }
                </MudButton>
            </MudTooltip>;
    }

    public RenderFragment? ToolbarEnd
    {
        get
        {
            if ((!OnPrint.HasDelegate || HidePrint) && HideDelete && HideEdit && HideRevisions)
            {
                return null;
            }

            RenderFragment fragment = @<text></text>;

            if (OnPrint.HasDelegate && !HidePrint)
            {
                fragment += PrintButton;
            }

            if (!HideRevisions)
            {
                fragment += RevisionButton;
            }

            if (!HideDelete)
            {
                fragment += DeleteButton;
            }

            @if (!HideEdit)
            {
                fragment += EditButton;
            }

            return fragment;
        }
    }

    public RenderFragment NewTabButton
    {
        get =>
            @<MudTooltip Text="@Loc["NewTab"]">
                <MudButton Variant="Variant.Text"
                           Color="Color.Default"
                           Style="min-width:40px;"
                           OnClick="OpenInNewTab">
                    <MudIcon Icon="@Icons.Material.Filled.OpenInNew"></MudIcon>
                </MudButton>
            </MudTooltip>;
    }

    public RenderFragment MaximizeButton
    {
        get =>
            @<MudTooltip Text="@(Maximized != true ? Loc["Maximize"] : Loc["Minimize"])">
                <MudButton Style="min-width:40px;"
                           Variant="Variant.Text"
                           Size="Size.Medium"
                           Color="Color.Default"
                           OnClick="ResizeForm">
                    <MudIcon Size="Size.Medium" Icon="@(Maximized != true ? @Icons.Material.Filled.CropSquare : Icons.Material.Filled.Minimize)" />
                </MudButton>
            </MudTooltip>;
    }

    public RenderFragment ToolbarControls
    {
        get => NewTabButton + MaximizeButton;
    }

    public RenderFragment Header
    {
        get =>
            @<text>
                @if (Mode == Modes.Archive)
                {
                    <MudAlert Severity="Severity.Warning">@Loc["RevisionIndicator"]</MudAlert>
                }
                @if (Value.IsDeleted)
                {
                    <MudAlert Severity="Severity.Error">@Loc["DeletedIndicator"]</MudAlert>
                }
             </text>;
    }

    public RenderFragment FooterToolbarEnd
    {
        get =>
            @<text>
                @if (Mode == Modes.Edit)
                {
                    <MudButton Disabled="@(TaskInProgress != Tasks.None)"
                               StartIcon="@Icons.Material.Filled.Cancel"
                               OnClick="CancelChanges">
                        @Loc["CancelChanges"]
                    </MudButton>
                }
                else if (Mode == Modes.Archive)
                {
                    <MudButton Disabled="@(TaskInProgress != Tasks.None)"
                               StartIcon="@Icons.Material.Filled.Cancel"
                               OnClick="CloseRevision">
                        @Loc["CloseRevisions"]
                    </MudButton>
                }
             </text>;
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        base.HeaderTemplate += Header;

        base.ToolbarEndTemplate += ToolbarEnd;

        base.ToolbarControlsTemplate += ToolbarControls;

        base.FooterToolbarEndTemplate += FooterToolbarEnd;
    }

}