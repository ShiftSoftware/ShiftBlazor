@typeparam T
@inherits MudSelect<T>

@namespace ShiftSoftware.ShiftBlazor.Components

@{
    base.BuildRenderTree(__builder);
}

@code {
    private bool FirstRun = true;

    public override Task SetParametersAsync(ParameterView parameters)
    {
        if (FirstRun)
        {
            FirstRun = false;
            if (parameters.TryGetValue(nameof(For), out System.Linq.Expressions.Expression<Func<T>>? _For))
            {
                Required = FormHelper.IsRequired<T>(_For!);
            }
        }

        return base.SetParametersAsync(parameters);
    }

    protected override void OnInitialized()
    {
        var type = Nullable.GetUnderlyingType(typeof(T));
        type ??= typeof(T);

        if (ChildContent == null && type.IsEnum)
        {
            ChildContent = RenderEnumItems(type);
        }
        base.OnInitialized();
    }

    private RenderFragment<Type> RenderEnumItems = (type) => @<text>

        @foreach (T x in Enum.GetValues(type))
        {
            <MudSelectItem Value="@x">@((x as Enum)?.Describe())</MudSelectItem>
        }

    </text>;
}