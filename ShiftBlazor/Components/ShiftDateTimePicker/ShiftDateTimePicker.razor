@namespace ShiftSoftware.ShiftBlazor.Components

@inject SettingManager SettingManager

<MudItem lg="DateLg" md="DateMd" sm="DateSm" xs="DateXs">
    <MudDatePickerExtended DateFormat="@(SettingManager.GetDateFormat())" Date="DateTimeOffset?.Date" DateChanged="DateChanged" Label="@DateLabel" />
</MudItem>

<MudItem lg="TimeLg" md="TimeMd" sm="TimeSm" xs="TimeXs">
    <MudTimePickerExtended AmPm="@(SettingManager.GetTimeFormat().Contains("tt"))" TimeFormat="@(SettingManager.GetTimeFormat())" Time="DateTimeOffset?.TimeOfDay" TimeChanged="TimeChanged" Label="@TimeLabel" Disabled="DateTimeOffset == null" />
</MudItem>

@code {
    [Parameter]
    public string? DateLabel { get; set; }

    [Parameter]
    public string? TimeLabel { get; set; }

    [Parameter]
    public int DateLg { get; set; }

    [Parameter]
    public int DateMd { get; set; }

    [Parameter]
    public int DateSm { get; set; }

    [Parameter]
    public int DateXs { get; set; }

    [Parameter]
    public int TimeLg { get; set; }

    [Parameter]
    public int TimeMd { get; set; }

    [Parameter]
    public int TimeSm { get; set; }

    [Parameter]
    public int TimeXs { get; set; }

    [Parameter]
    public DateTimeOffset? DateTimeOffset { get; set; }

    [Parameter]
    public EventCallback<DateTimeOffset?> DateTimeOffsetChanged { get; set; }

    public async Task DateChanged(DateTime? dateTime)
    {
        if (dateTime == null)
        {
            this.DateTimeOffset = null;
        }
        else
        {
            if (this.DateTimeOffset == null)
            {
                this.DateTimeOffset = new DateTime(dateTime.Value.Year, dateTime.Value.Month, dateTime.Value.Day, 0, 0, 0);
            }
            else
            {
                this.DateTimeOffset = new DateTime(dateTime.Value.Year, dateTime.Value.Month, dateTime.Value.Day, this.DateTimeOffset.Value.Hour, this.DateTimeOffset.Value.Minute, 0);
            }
        }

        await this.DateTimeOffsetChanged.InvokeAsync(this.DateTimeOffset);
    }

    public async Task TimeChanged(TimeSpan? timeSpan)
    {
        if (timeSpan == null)
        {
            if (this.DateTimeOffset != null)
            {
                this.DateTimeOffset = new DateTime(this.DateTimeOffset.Value.Year, this.DateTimeOffset.Value.Month, this.DateTimeOffset.Value.Day, 0, 0, 0);
            }
        }
        else
        {
            if (this.DateTimeOffset == null)
            {

            }
            else
            {
                this.DateTimeOffset = new DateTime(this.DateTimeOffset.Value.Year, this.DateTimeOffset.Value.Month, this.DateTimeOffset.Value.Day, timeSpan.Value.Hours, timeSpan.Value.Minutes, 0);
            }
        }

        await this.DateTimeOffsetChanged.InvokeAsync(this.DateTimeOffset);
    }
}