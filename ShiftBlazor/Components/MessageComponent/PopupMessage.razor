@using ShiftSoftware.ShiftEntity.Model
@using static MudBlazor.Icons.Material
@inject ClipboardService Clip
@inject MessageService MsgService
@namespace ShiftSoftware.ShiftBlazor.Components
@implements IShortcutComponent
@inject ShiftBlazorLocalizer Loc

<MudPaper Elevation="25" Style="height: 100%;">
    <MudFocusTrap>
        <MudAppBar Color="@Color" Fixed="false" Dense Elevation="0">
             <MudIcon Icon="@Icon" />
             <MudText title="@Message.Title" Class="px-4 text-overflow-ellipsis" Style="margin:0;">@Message.Title</MudText>

            <MudSpacer />

            <MudIconButtonExtended KeyboardKey="KeyboardKeys.Escape"
                                   Size="Size.Medium"
                                   OnClick="() => Close(true)"
                                   Icon="@Icons.Material.Filled.Close"
                                   Edge="Edge.End"
                                   Color="Color.Inherit"
                                   Title="@Loc["ClosePopupButtonLabel"]" />
        </MudAppBar>

        <div class="pa-6">

            @if (MessageBodyTemplate == null)
            {
                <MudText Style="word-wrap: break-word;">@Message.Body</MudText>

                @if (Message.SubMessages?.Count > 0)
                {
                    <MudList T="object">
                        @foreach (var msg in Message.SubMessages)
                        {
                            <MessageList Message="msg"></MessageList>
                        }
                    </MudList>
                }
            }
            else
            {
                @MessageBodyTemplate(Message)
            }

        </div>

        <MudToolBar Dense>
            <MudSpacer />
            @if (ReportButton)
            {
                <MudButton Variant="Variant.Text" OnClick="CopyToClipboard">@Loc["CopyButtonLabel"]</MudButton>
            }

            @if (!string.IsNullOrWhiteSpace(CancelText))
            {
                <MudButtonExtended KeyboardKey="KeyboardKeys.Escape" Variant="Variant.Text" OnClick="() => Close(true)" Class="me-2">@CancelText</MudButtonExtended>
            }

            <MudButtonExtended KeyboardKey="KeyboardKeys.KeyS" Variant="Variant.Text" Color="@Color" OnClick="() => Close()" Class="me-2">@(ConfirmText ?? Loc["ConfirmDefaultText"])</MudButtonExtended>
        </MudToolBar>
    </MudFocusTrap>
</MudPaper>

@code {
    [Parameter, EditorRequired]
    public Message Message { get; set; } = default!;

    [Parameter]
    public RenderFragment<Message>? MessageBodyTemplate { get; set; }

    [Parameter]
    public Color Color { get; set; } = Color.Warning;

    [Parameter]
    public string Icon { get; set; } = Filled.Warning;

    [Parameter]
    public string? ConfirmText { get; set; }

    [Parameter]
    public string? CancelText { get; set; }

    [Parameter]
    public bool ReportButton { get; set; }

    [CascadingParameter]
    internal IMudDialogInstance? MudDialog { get; set; }

    public Guid Id { get; private set; } = Guid.NewGuid();
    public string Title { get; set; } = string.Empty;
    public Dictionary<KeyboardKeys, object> Shortcuts { get; set; } = new();

    protected override void OnInitialized()
    {
        Title = Message.Title;
        IShortcutComponent.Register(this);
    }

    public ValueTask HandleShortcut(KeyboardKeys key)
    {
        switch (key)
        {
            case KeyboardKeys.Escape:
                Close(true);
                break;

            case KeyboardKeys.KeyS:
                Close(false);
                break;
        }

        return new ValueTask();
    }

    private void Close(bool cancel = false)
    {
        if (cancel)
        {
            MudDialog?.Cancel();
        }
        else
        {
            MudDialog?.Close();
        }

        IShortcutComponent.Remove(Id);
    }

    private async Task CopyToClipboard()
    {
        try
        {
            var msg = System.Text.Json.JsonSerializer.Serialize(Message);
            await Clip.WriteTextAsync(msg);
            MsgService.Success(Loc["CopyActionSuccess"]);
        }
        catch (Exception)
        {
            MsgService.Error(Loc["CopyActionFail"]);
        }
    }

    public void Dispose()
    {
        IShortcutComponent.Remove(Id);
    }
}
