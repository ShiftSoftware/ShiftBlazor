@inherits FilterUIBase

<div style="width: 100%;">

	<MudField Label="@Filter.Field" InnerPadding="false">
		<MudStack Row>
			<MudMenu Style="padding: 4px 0;" OpenChanged="OnMenuOpened">
				<ActivatorContent>
					<MudText>@Filter.Operator</MudText>
					<MudIcon Color="Color.Default" Style="margin-inline-start: 5px" Icon="@MenuIcon" />
				</ActivatorContent>
				<ChildContent>
					<MudMenuItem OnClick="@((x) => _OperatorChanged(ODataOperator.In))">Equal</MudMenuItem>
					<MudMenuItem OnClick="@((x) => _OperatorChanged(ODataOperator.NotIn))">Not Equal</MudMenuItem>
					<MudMenuItem OnClick="@((x) => _OperatorChanged(ODataOperator.IsNotEmpty))">Is Set</MudMenuItem>
					<MudMenuItem OnClick="@((x) => _OperatorChanged(ODataOperator.IsEmpty))">Is Not Set</MudMenuItem>
				</ChildContent>
			</MudMenu>

			@if (Filter.Operator != ODataOperator.IsEmpty && Filter.Operator != ODataOperator.IsNotEmpty)
			{
				<MudSelectExtended T="object"
								   MultiSelection
								   SelectedValues="Filter.Value as IEnumerable<object>"
								   SelectedValuesChanged="ValueChanged"
								   Underline="false"
								   Clearable >
					@if (EnumTypeToUse != null)
					{
						@foreach (var item in Enum.GetValues(EnumTypeToUse))
						{
							<MudSelectItem Value="@item">@(item is Enum _enum && !string.IsNullOrWhiteSpace(_enum.Describe()) ? _enum.Describe() : item)</MudSelectItem>
						}
					}
				</MudSelectExtended>
			}
		</MudStack>
	</MudField>

</div>

@code {
	[Parameter]
	[EditorRequired]
	public Type? EnumType { get;set; }

	private Type? EnumTypeToUse;

	private bool HasNoValue => Filter.Operator == ODataOperator.IsEmpty || Filter.Operator == ODataOperator.IsNotEmpty;

	private IEnumerable<object> Values { get; set; } = Enumerable.Empty<object>();

	protected override Task OnInitializedAsync()
	{
		Values = Filter.Value as IEnumerable<object> ?? Enumerable.Empty<object>();
		return base.OnInitializedAsync();
	}

	private void _OperatorChanged(ODataOperator oDataOperator)
	{
		// CloseMenu();

		Filter!.Operator = oDataOperator;
		UpdateFilter();

	}

	protected override void OnInitialized()
	{
		if (EnumType == null)
			throw new ArgumentNullException(nameof(EnumType));

		EnumTypeToUse = EnumType.IsEnum ? EnumType : Nullable.GetUnderlyingType(EnumType);
	}
}
