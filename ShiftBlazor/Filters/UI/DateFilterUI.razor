@using System.Globalization
@using ShiftSoftware.ShiftBlazor.Filters.Models
@inherits FilterUIBase

<MudField Class="custom-date-range-picker"
		  Adornment="Adornment.End"
		  AdornmentIcon="@Icons.Material.Filled.Settings"
		  InnerPadding="false"
		  Label="@Filter.Field"
		  OnAdornmentClick="OpenMenu">

	<MudMenu Style="padding: 4px 0;" OpenChanged="OnMenuOpened">
		<ActivatorContent>
			<MudText>@Filter.Operator</MudText>
			<MudIcon Color="Color.Default" Style="margin-inline-start: 5px" Icon="@MenuIcon" />
		</ActivatorContent>
		<ChildContent>
			<MudMenuItem OnClick="@((x) => OperatorChanged(ODataOperator.Equal))">Is</MudMenuItem>
			<MudMenuItem OnClick="@((x) => OperatorChanged(ODataOperator.NotEqual))">Is Not</MudMenuItem>
			<MudMenuItem OnClick="@((x) => OperatorChanged(ODataOperator.IsNotEmpty))">Is Set</MudMenuItem>
			<MudMenuItem OnClick="@((x) => OperatorChanged(ODataOperator.IsEmpty))">Is Not Set</MudMenuItem>
		</ChildContent>
	</MudMenu>

	@if (Filter.Operator != ODataOperator.IsEmpty && Filter.Operator != ODataOperator.IsNotEmpty)
	{
		<MudDatePicker Adornment="Adornment.None"
					   Editable
					   Underline="false"
					   DateChanged="DateStartChanged"
					   Date="_dateRangeValue.Start"
					   @onfocus="OpenPicker" />

		@if (IsPickerOpen || _dateRangeValue.Start != null || _dateRangeValue.End != null)
		{
			<MudIcon Icon="@Icons.Material.Filled.ArrowRightAlt" Color="Color.Default" Style="align-self: end;margin: 4px;" />
		}

		<MudDatePicker Adornment="Adornment.None"
					   Clearable
					   Underline="false"
					   DateChanged="DateEndChanged"
					   Date="_dateRangeValue.End"
					   Editable
					   @onfocus="OpenPicker" />
	}

	<MudPopover Open="IsPickerOpen" AnchorOrigin="Origin.BottomLeft">
		<MudDateRangePicker DateRange="_dateRangeValue"
							@ref="picker"
							Clearable
							Adornment="Adornment.End"
							AdornmentIcon="@Icons.Material.Filled.Settings"
							DateRangeChanged="RangeChangedHandler"
							PickerClosed="ClosePicker"
							PickerVariant="PickerVariant.Static">
			<PickerActions>
				<MudMenu MaxHeight="300" ActivationEvent="MouseEvent.MouseOver">
					<ActivatorContent>
						<MudButton>@DateOperator</MudButton>
					</ActivatorContent>
					<ChildContent>
						@foreach (var item in Enum.GetValues<DateFilterOperator>())
						{
							<MudMenuItem OnClick="() => PredefinedDate(item)">@item.ToString()</MudMenuItem>
						}
					</ChildContent>
				</MudMenu>

				@if (DateOperator == DateFilterOperator.Last || DateOperator == DateFilterOperator.Next)
				{
					<MudNumericField T="int" Value="UnitValue" ValueChanged="OnTimeUnitValueChanged" Min="1"></MudNumericField>
					<MudSelectExtended T="TimeUnit" Value="TimeUnit" ValueChanged="OnTimeUnitChanged">
						@foreach (var item in Enum.GetValues<TimeUnit>())
						{
							<MudSelectItem Value="item">@item.ToString()</MudSelectItem>
						}
					</MudSelectExtended>
				}
				else if (DateOperator == DateFilterOperator.Date || DateOperator == DateFilterOperator.After || DateOperator == DateFilterOperator.Before)
				{
					<MudDatePicker Date="DateTimeValue" DateChanged="OnDateTimeValueChanged" />
				}

				<MudSpacer />

				<MudButton Color="Color.Secondary" OnClick="() => picker!.CloseAsync(false)">Cancel</MudButton>
				<MudButton Color="Color.Primary" OnClick="@(() => picker!.CloseAsync(true))">OK</MudButton>

			</PickerActions>

		</MudDateRangePicker>
	</MudPopover>

	<MudPopover Open="_IsMenuOpen" RelativeWidth AnchorOrigin="Origin.BottomLeft">

	</MudPopover>
</MudField>

<MudOverlay Visible="IsPickerOpen || _IsMenuOpen" AutoClose OnClosed="OverlayClosed" />



<style>
	.MyTestClass {
		max-width: max-content !important;
	}

	.custom-date-range-picker > .mud-input-control-input-container > .mud-input > .mud-input-root {
		display: flex !important;
		flex-grow: 1 !important;
		z-index: 10 !important;
		padding-bottom: 0 !important;
	}

 	.custom-date-range-picker > .mud-input-control-input-container > .mud-input > .mud-input-adornment
	{
		margin-left: -14px !important;
	}
</style>


@code {

	private bool IsPickerOpen { get; set; }
	private bool _IsMenuOpen { get; set; }

	private DateRange _dateRangeValue { get; set; } = new DateRange(null, null);
	private MudDateRangePicker? picker;

	private DateFilterOperator DateOperator { get; set; }
	private TimeUnit TimeUnit { get; set; } = TimeUnit.Day;
	private int UnitValue { get; set; } = 1;
	private DateTime? DateTimeValue { get; set; } = DateTime.Now;


	protected override void OnInitialized()
	{
		if (Filter is DateFilterModel dateFilter && dateFilter.DateRangeValue != null)
		{
			_dateRangeValue = dateFilter.DateRangeValue;
		}
		base.OnInitialized();
	}

	protected override void OnAfterRender(bool firstRender)
	{
		base.OnAfterRender(firstRender);
		if (firstRender && Filter is DateFilterModel filter && filter.SelectedDateOperator != DateFilterOperator.Range)
		{
			OnDateOperatorChanged(DateFilterOperator.Range);
		}
	}

	private void OpenPicker()
	{
		IsPickerOpen = true;
	}

	private void ClosePicker()
	{
		IsPickerOpen = false;
	}

	private void OpenMenu()
	{
		_IsMenuOpen = true;
	}

	private void CloseMenu()
	{
		_IsMenuOpen = false;
	}

	private void OverlayClosed()
	{
		IsPickerOpen = false;
		CloseMenu();
	}

	private void RangeChangedHandler(DateRange range)
	{
		_dateRangeValue = range;
		RangeValueChanged();
	}

	private void DateStartChanged(DateTime? dateTime) 
	{
		if (dateTime != _dateRangeValue.Start)
		{
			_dateRangeValue.Start = dateTime;
		}
		RangeValueChanged();
	}

	private void DateEndChanged(DateTime? dateTime)
	{
		if (dateTime == null && (_dateRangeValue.Start != null || _dateRangeValue.End != null))
		{
			_dateRangeValue.Start = null;
			_dateRangeValue.End = null;

		}
		else if (dateTime != _dateRangeValue.End)
		{
			_dateRangeValue.End = dateTime;
		}
		RangeValueChanged();

	}

	private void PredefinedDate(DateFilterOperator dateOperator)
	{
		DateOperator = dateOperator;
		SetDateRange();
	}

	private void SetDateRange()
	{
		(DateTime? start, DateTime? end) = DateFilterModel.GetDateRange(DateOperator, TimeUnit, UnitValue, DateTimeValue);
		if (start == DateTime.MinValue.ToUniversalTime())
		{
			start = null;
		}
		if (end == DateTime.MaxValue.ToUniversalTime())
		{
			end = null;
		}
		_dateRangeValue = new DateRange(start, end);

		RangeValueChanged();
	}

	#region Operator Changed

	private void OnDateOperatorChanged(DateFilterOperator? value)
	{
		if (Filter is DateFilterModel dateFilter)
		{
			dateFilter.SelectedDateOperator = value;
			UpdateFilter();
		}
	}

	private void OnTimeUnitChanged(TimeUnit value)
	{
		TimeUnit = value;
		SetDateRange();
	}

	private void OnTimeUnitValueChanged(int value)
	{
		UnitValue = value;
		SetDateRange();
	}

	private void OnDateTimeValueChanged(DateTime? value)
	{
		DateTimeValue = value;
		SetDateRange();
	}

	private void RangeValueChanged()
	{
		if (Filter is DateFilterModel dateFilter)
		{
			dateFilter.DateRangeValue = _dateRangeValue;
			dateFilter.SelectedDateOperator = DateFilterOperator.Range;

			UpdateFilter();
		}
	}
	#endregion

}