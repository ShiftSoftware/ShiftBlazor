@using ShiftSoftware.ShiftBlazor.Filters.Models
@using ShiftSoftware.ShiftEntity.Model
@inherits FilterUIBase

<div style="width: 100%;" class="@ClassName">
	<MudField Label="@Filter.Field" InnerPadding="false">
		<MudStack Row>
			@if (Filter is StringFilterModel stringFilter && stringFilter.AutocompleteOptions != null)
			{
				<MudMenu Style="padding: 4px 0;" OpenChanged="OnMenuOpened">
					<ActivatorContent>
						<MudText>@Filter.Operator</MudText>
						<MudIcon Color="Color.Default" Style="margin-inline-start: 5px" Icon="@MenuIcon"/>
					</ActivatorContent>
					<ChildContent>
						<MudMenuItem OnClick="@((x) => OperatorChanged(ODataOperator.In))">In</MudMenuItem>
						<MudMenuItem OnClick="@((x) => OperatorChanged(ODataOperator.NotIn))">Not In</MudMenuItem>
					</ChildContent>
				</MudMenu>

				<DynamicComponent Type="AutocompleteType" Parameters="AutocompleteParameters" />
			}
			else
			{
				<MudMenu Style="padding: 4px 0;" OpenChanged="OnMenuOpened">
					<ActivatorContent>
						<MudText>@Filter.Operator</MudText>
						<MudIcon Color="Color.Default" Style="margin-inline-start: 5px" Icon="@MenuIcon"/>
					</ActivatorContent>
					<ChildContent>
						<MudMenuItem OnClick="@((x) => OperatorChanged(ODataOperator.Equal))">Equal</MudMenuItem>
						<MudMenuItem OnClick="@((x) => OperatorChanged(ODataOperator.NotEqual))">Not Equal</MudMenuItem>
						<MudMenuItem OnClick="@((x) => OperatorChanged(ODataOperator.StartsWith))">Starts With</MudMenuItem>
						<MudMenuItem OnClick="@((x) => OperatorChanged(ODataOperator.NotStartsWith))">Not Starts With</MudMenuItem>
						<MudMenuItem OnClick="@((x) => OperatorChanged(ODataOperator.EndsWith))">Ends With</MudMenuItem>
						<MudMenuItem OnClick="@((x) => OperatorChanged(ODataOperator.NotEndsWith))">Not Ends With</MudMenuItem>
						<MudMenuItem OnClick="@((x) => OperatorChanged(ODataOperator.Contains))">Contains</MudMenuItem>
						<MudMenuItem OnClick="@((x) => OperatorChanged(ODataOperator.NotContains))">Not Contains</MudMenuItem>
						<MudMenuItem OnClick="@((x) => OperatorChanged(ODataOperator.IsNotEmpty))">Is Set</MudMenuItem>
						<MudMenuItem OnClick="@((x) => OperatorChanged(ODataOperator.IsEmpty))">Is Not Set</MudMenuItem>
						@if (AutocompleteType != null)
						{
							<MudMenuItem OnClick="@((x) => OperatorChanged(ODataOperator.In))">In</MudMenuItem>
							<MudMenuItem OnClick="@((x) => OperatorChanged(ODataOperator.NotIn))">Not In</MudMenuItem>
						}
					</ChildContent>
				</MudMenu>

				@if (AutocompleteType != null && (Filter.Operator == ODataOperator.In || Filter.Operator == ODataOperator.NotIn))
				{
					<DynamicComponent Type="AutocompleteType" Parameters="AutocompleteParameters" />
				}
				else if (Filter.Operator != ODataOperator.IsEmpty && Filter.Operator != ODataOperator.IsNotEmpty)
				{
					<MudTextField T="string"
									Value="Value"
									Clearable
									Underline="false"
									ValueChanged="ValueChanged" />
				}
			}

		</MudStack>
	</MudField>

</div>

@code
{
	private string Value => (string?)Filter.Value ?? string.Empty;

	[CascadingParameter]
	public IShiftList? ShiftList { get; set; }

	private Type? AutocompleteType;
	private Dictionary<string, object>? AutocompleteParameters;

	protected override void OnInitialized()
	{
		base.OnInitialized();

		if (Filter is StringFilterModel stringFilter)
		{
			if (stringFilter.AutocompleteOptions != null &&
				stringFilter.DtoType == null)
			{
				throw new ArgumentNullException(nameof(stringFilter.DtoType));
			}
			else if (stringFilter.DtoType == null)
			{
				return;
			}

			var options = stringFilter.AutocompleteOptions;
			AutocompleteType = typeof(ShiftAutocomplete<>).MakeGenericType(stringFilter.DtoType);
			AutocompleteParameters = new()
			{
				["Strict"] = false,
				["ValueChanged"] = new EventCallback<ShiftEntitySelectDTO>(this, AutocompleteChanged),
				["SelectedValuesChanged"] = new EventCallback<List<ShiftEntitySelectDTO>>(this, AutocompleteMultiChanged),
				["MultiSelect"] = true,
				["Clearable"] = true,
				["Underline"] = false,
			};

			if (stringFilter.AutocompleteOptions != null)
			{
				AutocompleteParameters["BaseUrl"] = options.BaseUrl;
				AutocompleteParameters["BaseUrlKey"] = options.BaseUrlKey;
				AutocompleteParameters["EntitySet"] = options.EntitySet;
				AutocompleteParameters["DataTextField"] = options.DataTextField;
				AutocompleteParameters["DataValueField"] = options.DataValueField;
				AutocompleteParameters["ForeignTextField"] = options.ForeignTextField;
				AutocompleteParameters["ForeignEntiyField"] = options.ForeignEntiyField;
			}
			else if (Misc.GetAttribute<ShiftEntityKeyAndNameAttribute>(stringFilter.DtoType) != null &&
					!string.IsNullOrWhiteSpace(ShiftList?.EntitySet))
			{
				AutocompleteParameters["EntitySet"] = ShiftList.EntitySet;
				AutocompleteParameters["DataTextField"] = stringFilter.Field;
			}
		}
	}

	private void AutocompleteMultiChanged(List<ShiftEntitySelectDTO>? dto)
	{
		if (Filter is StringFilterModel filter && filter.AutocompleteOptions != null)
		{
			Filter.Value = dto?.Select(x => x.Value).ToList();
		}
		else
		{
			Filter.Value = dto?.Select(x => x.Text).ToList();
		}
		UpdateFilter();
	}

	private void AutocompleteChanged(ShiftEntitySelectDTO? dto)
	{
		var value = Filter is StringFilterModel filter && filter.AutocompleteOptions != null
			? dto?.Value
			: dto?.Text;

		ValueChanged(value);
	}
}