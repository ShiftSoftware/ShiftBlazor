@using ShiftSoftware.ShiftBlazor.Filters.Models
@using ShiftSoftware.ShiftEntity.Model
@inherits FilterUIBase

@* <MudSelectExtended T="ODataOperator" Value="Filter.Operator" ValueChanged="_OperatorChanged" Label="Operator" >
	<MudSelectItem Value="ODataOperator.Equal">Equal</MudSelectItem>
	<MudSelectItem Value="ODataOperator.StartsWith">Starts With</MudSelectItem>
	<MudSelectItem Value="ODataOperator.EndsWith">Ends With</MudSelectItem>
	<MudSelectItem Value="ODataOperator.Contains">Contains</MudSelectItem>
	<MudSelectItem Value="ODataOperator.NotEqual">Not Equal</MudSelectItem>
	<MudSelectItem Value="ODataOperator.NotContains">Not Contains</MudSelectItem>
	<MudSelectItem Value="ODataOperator.IsNotEmpty">Is Set</MudSelectItem>
	<MudSelectItem Value="ODataOperator.IsEmpty">Is Not Set</MudSelectItem>
	<MudSelectItem Value="ODataOperator.In">In</MudSelectItem>
</MudSelectExtended> *@


@* @if (Filter.Operator != ODataOperator.IsEmpty && Filter.Operator != ODataOperator.IsNotEmpty)
{
	if (AutoCompleteType == null || AutoCompleteParameters == null)
	{
		<MudTextField T="string" Label="@Filter.Field" Value="Value" Clearable ValueChanged="ValueChanged" />
	}
	else
	{
		<DynamicComponent Type="AutoCompleteType" Parameters="AutoCompleteParameters" />
	}
} *@

<div style="width: 100%;">
	<MudField Label="@Filter.Field" InnerPadding="false">
		<MudStack Row>
			@if (Filter is StringFilterModel stringFilter && stringFilter.AutocompleteOptions != null)
			{
				<MudSelect Underline="false" T="ODataOperator" Value="Filter.Operator" ValueChanged="_OperatorChanged">
					<MudSelectItem Value="ODataOperator.In">In</MudSelectItem>
					<MudSelectItem Value="ODataOperator.NotIn">Not In</MudSelectItem>
				</MudSelect>

				<DynamicComponent Type="AutocompleteType" Parameters="AutocompleteParameters" />
			}
			else
			{
		
				<MudSelect Underline="false" T="ODataOperator" Value="Filter.Operator" ValueChanged="_OperatorChanged">
					<MudSelectItem Value="ODataOperator.Equal">Equal</MudSelectItem>
					<MudSelectItem Value="ODataOperator.NotEqual">Not Equal</MudSelectItem>
					<MudSelectItem Value="ODataOperator.StartsWith">Starts With</MudSelectItem>
					<MudSelectItem Value="ODataOperator.NotStartsWith">Not Starts With</MudSelectItem>
					<MudSelectItem Value="ODataOperator.EndsWith">Ends With</MudSelectItem>
					<MudSelectItem Value="ODataOperator.NotEndsWith">Not Ends With</MudSelectItem>
					<MudSelectItem Value="ODataOperator.Contains">Contains</MudSelectItem>
					<MudSelectItem Value="ODataOperator.NotContains">Not Contains</MudSelectItem>
					<MudSelectItem Value="ODataOperator.IsNotEmpty">Is Set</MudSelectItem>
					<MudSelectItem Value="ODataOperator.IsEmpty">Is Not Set</MudSelectItem>
					<MudSelectItem Value="ODataOperator.In">In</MudSelectItem>
					<MudSelectItem Value="ODataOperator.NotIn">Not In</MudSelectItem>
				</MudSelect>

				@if (Filter.Operator != ODataOperator.IsEmpty && Filter.Operator != ODataOperator.IsNotEmpty)
				{
					<MudTextField T="string"
									Value="Value"
									Clearable
									Underline="false"
									ValueChanged="ValueChanged" />
				}
			}

		</MudStack>
	</MudField>

</div>

@code
{
	private string Value => (string?)Filter.Value ?? string.Empty;

	[CascadingParameter]
	public IShiftList? ShiftList { get; set; }

	private Type? AutocompleteType;
	private Dictionary<string, object>? AutocompleteParameters;

	private bool IsMultiSelect => Filter.Operator == ODataOperator.In || Filter.Operator == ODataOperator.NotIn;


	// internal async Task<IEnumerable<string>> SearchFunc(string val, CancellationToken token)
	// {
	// 	List<string> items = new()
	// 	{
	// 		"Is not Empty",
	// 		"Is Empty",
	// 	};

	// 	return items;
	// }

	protected override void OnInitialized()
	{
		base.OnInitialized();

		if (Filter is StringFilterModel stringFilter)
		{
			if (stringFilter.AutocompleteOptions != null &&
				stringFilter.DtoType == null)
			{
				throw new ArgumentNullException(nameof(stringFilter.DtoType));
			}
			else if (stringFilter.DtoType == null)
			{
				return;
			}

			var options = stringFilter.AutocompleteOptions;
			AutocompleteType = typeof(ShiftAutocomplete<>).MakeGenericType(stringFilter.DtoType);
			AutocompleteParameters = new()
			{
				["Strict"] = false,
				["ValueChanged"] = new EventCallback<ShiftEntitySelectDTO>(this, AutocompleteChanged),
				["SelectedValuesChanged"] = new EventCallback<List<ShiftEntitySelectDTO>>(this, AutocompleteMultiChanged),
				["MultiSelect"] = IsMultiSelect,
				["Clearable"] = true,
				["Underline"] = false,
			};

			if (stringFilter.AutocompleteOptions != null)
			{
				AutocompleteParameters["BaseUrl"] = options.BaseUrl;
				AutocompleteParameters["BaseUrlKey"] = options.BaseUrlKey;
				AutocompleteParameters["EntitySet"] = options.EntitySet;
				AutocompleteParameters["DataTextField"] = options.DataTextField;
				AutocompleteParameters["DataValueField"] = options.DataValueField;
				AutocompleteParameters["ForeignTextField"] = options.ForeignTextField;
				AutocompleteParameters["ForeignEntiyField"] = options.ForeignEntiyField;
			}
			else if (Misc.GetAttribute<ShiftEntityKeyAndNameAttribute>(stringFilter.DtoType) != null &&
					!string.IsNullOrWhiteSpace(ShiftList?.EntitySet))
			{
				AutocompleteParameters["EntitySet"] = ShiftList.EntitySet;
				AutocompleteParameters["DataTextField"] = stringFilter.Field;
			}
		}
	}

	protected override void OnParametersSet()
	{
		base.OnParametersSet();
	}

	private void _OperatorChanged(ODataOperator oDataOperator)
	{
		IsMenuOpen = false;
		if (AutocompleteParameters != null)
		{
			AutocompleteParameters["MultiSelect"] = IsMultiSelect;
		}

		Filter!.Operator = oDataOperator;
		UpdateFilter();
	}

	private void AutocompleteMultiChanged(List<ShiftEntitySelectDTO>? dto)
	{
		if (Filter is StringFilterModel filter && filter.AutocompleteOptions != null)
		{
			Filter.Value = dto?.Select(x => x.Value).ToList();
		}
		else
		{
			Filter.Value = dto?.Select(x => x.Text).ToList();
		}
		UpdateFilter();
	}

	private void AutocompleteChanged(ShiftEntitySelectDTO? dto)
	{
		var value = Filter is StringFilterModel filter && filter.AutocompleteOptions != null
			? dto?.Value
			: dto?.Text;

		ValueChanged(value);
	}
}