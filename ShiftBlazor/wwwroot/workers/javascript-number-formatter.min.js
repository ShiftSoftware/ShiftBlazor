const maskRegex = /[0-9\-+#]/, notMaskRegex = /[^\d\-+#]/g; function getIndex(e) { return e.search(maskRegex) } function processMask(e = "#.##") { let t = {}, n = e.length, r = getIndex(e); t.prefix = r > 0 ? e.substring(0, r) : ""; let s = getIndex(e.split("").reverse().join("")), i = n - s, a = e.substring(i, i + 1), g = i + ("." === a || "," === a ? 1 : 0); t.suffix = s > 0 ? e.substring(g, n) : "", t.mask = e.substring(r, g), t.maskHasNegativeSign = "-" === t.mask.charAt(0), t.maskHasPositiveSign = "+" === t.mask.charAt(0); let l = t.mask.match(notMaskRegex); return t.decimal = l && l[l.length - 1] || ".", t.separator = l && l[1] && l[0] || ",", l = t.mask.split(t.decimal), t.integer = l[0], t.fraction = l[1], t } function processValue(e, t, n) { let r = !1, s = { value: e }; e < 0 && (r = !0, s.value = -s.value), s.sign = r ? "-" : "", s.value = Number(s.value).toFixed(t.fraction && t.fraction.length), s.value = Number(s.value).toString(); let i = t.fraction && t.fraction.lastIndexOf("0"), [a = "0", g = ""] = s.value.split("."); return (!g || g && g.length <= i) && (g = i < 0 ? "" : Number("0." + g).toFixed(i + 1).replace("0.", "")), s.integer = a, s.fraction = g, addSeparators(s, t), ("0" === s.result || "" === s.result) && (r = !1, s.sign = ""), !r && t.maskHasPositiveSign ? s.sign = "+" : r && t.maskHasPositiveSign ? s.sign = "-" : r && (s.sign = n && n.enforceMaskSign && !t.maskHasNegativeSign ? "" : "-"), s } function addSeparators(e, t) { e.result = ""; let n = t.integer.split(t.separator), r = n.join(""), s = r && r.indexOf("0"); if (s > -1) for (; e.integer.length < r.length - s;)e.integer = "0" + e.integer; else 0 === Number(e.integer) && (e.integer = ""); let i = n[1] && n[n.length - 1].length; if (i) { let a = e.integer.length, g = a % i; for (let l = 0; l < a; l++)e.result += e.integer.charAt(l), !((l - g + 1) % i) && l < a - i && (e.result += t.separator) } else e.result = e.integer; return e.result += t.fraction && e.fraction ? t.decimal + e.fraction : "", e } function format(e, t, n = {}) { if (!e || isNaN(Number(t))) return t; let r = processMask(e), s = processValue(t, r, n); return r.prefix + s.sign + s.result + r.suffix }