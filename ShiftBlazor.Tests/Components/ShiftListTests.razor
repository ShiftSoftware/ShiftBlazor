@using RichardSzalay.MockHttp
@using Syncfusion.Blazor.Grids

@inherits TestContext

@code {
    public List<Sample> Values = new();

    public static string BaseUrl = "http://localhost";
    public static string ODataBaseUrl = "/odata";

    public ShiftListTests()
    {
        var mock = Services.AddMockHttpClient();
        mock.When(ODataBaseUrl + "/Product").RespondJson(new ODataResult<Sample>
        {
            value = Values,
        });
        Services.AddShiftServices(config =>
        {
            config.ODataEndpoint = BaseUrl + ODataBaseUrl;
            config.MudBlazorConfiguration = options =>
            {
                options.SnackbarConfiguration.ShowTransitionDuration = 0;
                options.SnackbarConfiguration.HideTransitionDuration = 0;
            };
        });

        JSInterop.Mode = JSRuntimeMode.Loose;

        for (var i = 0; i < 100; i++)
        {
            Values.Add(new Sample
            {
                Name = "Sample " + 1,
                ID = i + 1,
            });
        }
    }

    [Fact]
    public void ShouldShowErrorIfActionAndValueAreNull()
    {
        var cut = Render(@<ShiftList T="ShiftEntityDTO"></ShiftList>);

        var alertComp = cut.FindComponent<MudBlazor.MudAlert>();

        Assert.NotNull(alertComp);
        Assert.Contains("Both Action and Values cannot be null", alertComp.Markup);
    }

    [Fact]
    public void ShouldShowErrorSnackbarWhenBadUrl()
    {
        var cut = Render(@<div>
            <MudSnackbarProvider></MudSnackbarProvider>
            <ShiftList T="ShiftEntityDTO" Action="/404-page"></ShiftList>
        </div>
    );

        cut.WaitForElement(".disable-grid");
        cut.Find("div.mud-snackbar-content-message");
    }

    //[Fact]
    //public void ShouldRenderRowsPerPageCorrectly()
    //{
    //    var cut = Render(@<ShiftList T="Sample" Action="@(ODataBaseUrl + "/Product")"></ShiftList>);

    //    var grid = cut.FindComponent<SfGrid<Sample>>();

    //    var rows = grid.FindAll(".e-content .e-table > tbody > .e-row");

    //    cut.WaitForAssertion(() =>
    //    {
    //        Assert.Equal(grid.Instance.PageSettings.PageSize, grid.FindAll(".e-row").Count);
    //    });

    //}

    /// <summary>
    /// Title
    /// </summary>
    [Fact]
    public void ShouldRenderTitleCorrectly()
    {
        //get a random string
        var title = Guid.NewGuid().ToString();

        var cut = Render(@<ShiftList T="ShiftEntityDTO" Action="@(ODataBaseUrl + "/Product")" Title="@title"></ShiftList>);

        Assert.Contains(title, cut.Markup);
        //TODO: check page title?
    }

    /// <summary>
    /// page size
    /// </summary>
    [Fact]
    public void ShouldBeAbleToSetDataGridPageSize()
    {
        var pageSize = 22;

        var cut = Render(@<ShiftList T="ShiftEntityDTO" Action="@(ODataBaseUrl + "/Product")" PageSize="@pageSize"></ShiftList>);
        var grid = cut.FindComponent<SfGrid<ShiftEntityDTO>>();

        Assert.Equal(pageSize, grid.Instance.PageSettings.PageSize);
    }

    /// <summary>
    /// ExcludedHeaders
    /// </summary>
    [Fact]
    public void ShouldHideExcludedColumns2()
    {
        List<string> excludedHeaders = new()
        {
            nameof(Sample.LastName),
            nameof(Sample.City),
        };

        var cut = Render(@<ShiftList T="Sample" Action="@(ODataBaseUrl + "/Product")" ExcludedColumns="@excludedHeaders" ComponentType="typeof(DummyComponent)"></ShiftList>);

        var grid = cut.FindComponent<SfGrid<Sample>>();

        var columns = grid.Instance.Columns.Where(x => excludedHeaders.Contains(x.Field));

        Assert.Equal(excludedHeaders.Count, columns.Count());
        Assert.All(columns, x => x.Visible.Equals(false));
    }

    [Fact]
    public void ShouldHideColumnsByDefault()
    {
        var comp = Render(@<ShiftList T="Sample" Action="@(ODataBaseUrl + "/Product")" ComponentType="typeof(DummyComponent)"></ShiftList>);

        var grid = comp.FindComponent<SfGrid<Sample>>();

        var revisionsColumns = grid.Instance.Columns.FirstOrDefault(x => x.Field.Equals(nameof(Sample.Revisions)));
        var idColumns = grid.Instance.Columns.Where(x => x.Field.Equals(nameof(Sample.ID)));

        Assert.Null(revisionsColumns);
        Assert.Single(idColumns);
        Assert.False(idColumns.First().Visible);
    }

    [Fact]
    public void ShouldRenderOrHideActionColumn1()
    {
        // Should not render Actions column when ComponentType is not set
        var comp1 = Render(@<ShiftList T="ShiftEntityDTOBase" Action="@(ODataBaseUrl + "/Product")"></ShiftList>);
        var grid1 = comp1.FindComponent<SfGrid<ShiftEntityDTOBase>>().Instance;
        var cols1 = grid1.Columns.Where(x => x.HeaderText == "Actions");
        Assert.Empty(cols1);
    }
    [Fact]
    public void ShouldRenderOrHideActionColumn2()
    {

        // Should render Actions column when ComponentType is 
        var comp2 = Render(@<ShiftList T="ShiftEntityDTOBase" Action="@(ODataBaseUrl + "/Product")" ComponentType="typeof(DummyComponent)"></ShiftList>);
        var grid2 = comp2.FindComponent<SfGrid<ShiftEntityDTOBase>>().Instance;
        var cols2 = grid2.Columns.Where(x => x.HeaderText == "Actions");
        Assert.Single(cols2);
    }
    [Fact]
    public void ShouldRenderOrHideActionColumn3()
    {
        List<string> excludedHeaders = new()
        {
            "Actions",
        };

        // Should not render Actions column when it is excluded in ExcludedColumns
        var comp3 = Render(@<ShiftList T="ShiftEntityDTOBase" Action="@(ODataBaseUrl + "/Product")" ComponentType="typeof(DummyComponent)" ExcludedColumns="excludedHeaders"></ShiftList>);
        var grid3 = comp3.FindComponent<SfGrid<ShiftEntityDTOBase>>().Instance;
        var cols3 = grid3.Columns.Where(x => x.HeaderText == "Actions");
        Assert.Empty(cols3);
    }

    [Fact]
    public void ShouldNotRenderDownloadButton()
    {
        var comp = Render(@<ShiftList T="Sample" Action="@(ODataBaseUrl + "/Product")" ComponentType="typeof(DummyComponent)" EnableCsvExcelExport="false" EnablePdfExport="false"></ShiftList>);

        try
        {
            var menu = comp.FindComponent<MudMenu>();
            throw new Exception("MudMenu element found, it should not be rendered when both Csv and PDF are disabled");
        }
        catch {}
    }

    [Fact]
    public void ShouldOnlyRenderCSVnExcelButton()
    {
        var comp = Render(
    @<div>
        <MudBlazor.MudPopoverProvider></MudBlazor.MudPopoverProvider>
        <ShiftList T="Sample" Action="@(ODataBaseUrl + "/Product")" ComponentType="typeof(DummyComponent)" EnableCsvExcelExport="true" EnablePdfExport="false"></ShiftList>
    </div>
        );

        var grid = comp.FindComponent<SfGrid<Sample>>().Instance;

        Assert.False(grid.AllowPdfExport);
        Assert.True(grid.AllowExcelExport);

        comp.FindAll("button.mud-button-root")[0].Click();

        comp.WaitForAssertion(() => Assert.Equal(2, comp.FindAll("div.mud-list-item").Count));

        Assert.DoesNotContain("PDF Export", comp.Markup);
        Assert.Contains("CSV Export", comp.Markup);
        Assert.Contains("Excel Export", comp.Markup);
    }

    [Fact]
    public void ShouldOnlyRenderPDFButton()
    {
        var comp = Render(
    @<div>
        <MudBlazor.MudPopoverProvider></MudBlazor.MudPopoverProvider>
        <ShiftList T="Sample" Action="@(ODataBaseUrl + "/Product")" ComponentType="typeof(DummyComponent)" EnableCsvExcelExport="false" EnablePdfExport="true"></ShiftList>
    </div>
    );
        var grid = comp.FindComponent<SfGrid<Sample>>().Instance;

        Assert.False(grid.AllowExcelExport);
        Assert.True(grid.AllowPdfExport);

        comp.FindAll("button.mud-button-root")[0].Click();

        comp.WaitForAssertion(() => Assert.Equal(1, comp.FindAll("div.mud-list-item").Count));

        Assert.Contains("PDF Export", comp.Markup);
        Assert.DoesNotContain("CSV Export", comp.Markup);
        Assert.DoesNotContain("Excel Export", comp.Markup);
    }

    [Fact]
    public void ShouldRenderPrintButton()
    {
        var comp = Render(@<ShiftList T="Sample" Action="@(ODataBaseUrl + "/Product")" ComponentType="typeof(DummyComponent)" EnablePrint="true"></ShiftList>);

        var tooltips = comp.FindComponents<MudTooltip>();

        var print = tooltips.First(x => x.Instance.Text.Equals("Print"));
        print.Find("button");
    }

    [Fact]
    public void ShouldEnableVirtualizationAndDisablePaging()
    {
        var comp = Render(@<ShiftList T="Sample" Action="@(ODataBaseUrl + "/Product")" ComponentType="typeof(DummyComponent)" EnableVirtualization="true"></ShiftList>);

        var grid = comp.FindComponent<SfGrid<Sample>>().Instance;

        Assert.True(grid.EnableVirtualization);
        Assert.True(grid.EnableVirtualMaskRow);
        Assert.False(grid.AllowPaging);
        Assert.NotNull(grid.Columns.ElementAt(1).HeaderTemplate);
    }

    [Fact]
    public void ShouldNotRenderAddButton()
    {
        var comp = Render(@<ShiftList T="Sample" Action="@(ODataBaseUrl + "/Product")" ComponentType="typeof(DummyComponent)" DisableAdd="true"></ShiftList>);
        var instance = comp.FindComponent<ShiftList<Sample>>().Instance;

        Assert.False(instance.RenderAddButton);

        var tooltips = comp.FindComponents<MudTooltip>();

        Assert.Null(tooltips.FirstOrDefault(x => x.Instance.Text.Equals("Add")));
    }

    [Fact]
    public void ShouldDisableDataGridPaging()
    {
        var comp = Render(@<ShiftList T="Sample" Action="@(ODataBaseUrl + "/Product")" ComponentType="typeof(DummyComponent)" DisablePagination="true"></ShiftList>);
        var grid = comp.FindComponent<SfGrid<Sample>>().Instance;

        Assert.False(grid.AllowPaging);
    }

    [Fact]
    public void ShouldDisableDataGridSorting()
    {
        var comp = Render(@<ShiftList T="Sample" Action="@(ODataBaseUrl + "/Product")" ComponentType="typeof(DummyComponent)" DisableSorting="true"></ShiftList>);
        var grid = comp.FindComponent<SfGrid<Sample>>().Instance;

        Assert.False(grid.AllowSorting);
    }

    [Fact]
    public void ShouldDisableDataGridMultiSorting()
    {
        var comp = Render(@<ShiftList T="Sample" Action="@(ODataBaseUrl + "/Product")" ComponentType="typeof(DummyComponent)" DisableMultiSorting="true"></ShiftList>);
        var grid = comp.FindComponent<SfGrid<Sample>>().Instance;

        Assert.False(grid.AllowMultiSorting);
    }

    [Fact]
    public void ShouldDisableDataGridFilters()
    {
        var comp = Render(@<ShiftList T="Sample" Action="@(ODataBaseUrl + "/Product")" ComponentType="typeof(DummyComponent)" DisableFilters="true"></ShiftList>);
        var grid = comp.FindComponent<SfGrid<Sample>>().Instance;

        Assert.False(grid.AllowFiltering);
    }

    [Fact]
    public void ShouldDisableDataGridSelection()
    {
        var comp = Render(@<ShiftList T="Sample" Action="@(ODataBaseUrl + "/Product")" ComponentType="typeof(DummyComponent)" DisableSelection="true"></ShiftList>);
        var grid = comp.FindComponent<SfGrid<Sample>>().Instance;

        Assert.False(grid.AllowSelection);
    }

    [Fact]
    public void ShouldAddColumnsToDataGrid()
    {
        var headerText = "This is a header";
        var comp = Render(
        @<ShiftList T="Sample" Action="@(ODataBaseUrl + "/Product")" ComponentType="typeof(DummyComponent)">
            <ColumnTemplate>
                <GridColumn HeaderText="@headerText"></GridColumn>
            </ColumnTemplate>
        </ShiftList>
    );

        var grid = comp.FindComponent<SfGrid<Sample>>().Instance;

        var customColumn = grid.Columns.FirstOrDefault(x => x.HeaderText.Equals(headerText));

        Assert.NotNull(customColumn);
    }

    [Fact]
    public void ShouldReplaceActionsColumnContent()
    {
        var text = "Hello World!";
        var comp = Render(
        @<ShiftList T="Sample" Action="@(ODataBaseUrl + "/Product")" ComponentType="typeof(DummyComponent)">
            <ActionsTemplate>
                <h1>@text</h1>
            </ActionsTemplate>
        </ShiftList>
    );

        var grid = comp.FindComponent<SfGrid<Sample>>();
        var row = grid.Find(".e-table .e-row .e-rowcell[aria-label~='Actions']");
        row.FirstChild.MarkupMatches($"<div><h1>{text}</h1></div>");
    }

    [Fact]
    public void ShouldAddElementsToToolbar()
    {
        var text = "click me!";

        var comp = Render(
    @<ShiftList T="Sample" Action="@(ODataBaseUrl + "/Product")" ComponentType="typeof(DummyComponent)">
        <ToolbarTemplate>
            <button>@text</button>
        </ToolbarTemplate>
        </ShiftList>
    );

        var toolbar = comp.Find(".shift-toolbar-header");

        Assert.Contains($"<button>{text}</button>", toolbar.ToMarkup());
    }

    [Fact]
    public void ShouldAddQueryToDataGridQuery()
    {
        var query = new Syncfusion.Blazor.Data.Query().Expand(new List<string> { "Customer" });

        var comp = Render(@<ShiftList T="Sample" Action="@(ODataBaseUrl + "/Product")" ComponentType="typeof(DummyComponent)" Query="query"></ShiftList>);
        var grid = comp.FindComponent<SfGrid<Sample>>().Instance;

        Assert.Equal(query, grid.Query);
    }

    [Fact]
    public void ShouldSetActionColumnWidth()
    {
        var width = "250";

        var comp = Render(@<ShiftList T="Sample" Action="@(ODataBaseUrl + "/Product")" ComponentType="typeof(DummyComponent)" ActionColumnWidth="@width"></ShiftList>);
        var grid = comp.FindComponent<SfGrid<Sample>>().Instance;

        Assert.Equal(width, grid.Columns.First(x => x.HeaderText.Equals("Actions")).Width);
    }

    [Fact]
    public void ShouldSetDataGridHeight()
    {
        var height = "600";
        var comp = Render(@<ShiftList T="Sample" Action="@(ODataBaseUrl + "/Product")" ComponentType="typeof(DummyComponent)" GridHeight="@height"></ShiftList>);
        var grid = comp.FindComponent<SfGrid<Sample>>().Instance;

        Assert.Equal(height, grid.Height);
    }

    //[Fact]
    //public void ShouldOpenDialogWithAddedParameters()
    //{
    //    Assert.Fail("ShouldOpenDialogWithAddedParameters");
    //}

    [Fact]
    public void ShouldAutoGenerateColumns()
    {
        var comp = Render(@<ShiftList T="Sample" Action="@(ODataBaseUrl + "/Product")" ComponentType="typeof(DummyComponent)" AutoGenerateColumns="true"></ShiftList>);
        var instance = comp.FindComponent<ShiftList<Sample>>().Instance;
        var grid = comp.FindComponent<SfGrid<Sample>>().Instance;

        var props = typeof(Sample).GetProperties().Where(x => !instance.DefaultExcludedColumns.Contains(x.Name));

        var fields = grid.Columns.Select(x => x.Field);
        var results = new List<bool>();

        Assert.All(props, x => Assert.Contains(x.Name, fields));
    }

    [Fact]
    public void ShouldEmbededInsideForm()
    {

        var comp = Render(@<ShiftList T="Sample" Action="@(ODataBaseUrl + "/Product")" ComponentType="typeof(DummyComponent)" EmbededInsideForm="true"></ShiftList>);

        var toolbar = comp.FindComponent<MudToolBar>();

        Assert.Contains("shift-toolbar-header", toolbar.Instance.Class);

        var tooltips = toolbar.FindComponents<MudTooltip>().Where(x => !x.Instance.Text.Equals("Add"));
        var divider = toolbar.FindComponents<MudDivider>();

        Assert.Empty(tooltips);
        Assert.Empty(divider);
    }



}
