@using RichardSzalay.MockHttp
@using Blazored.FluentValidation

@inherits TestContext

@code {
    public List<Sample> Values = new();

    public static string BaseUrl = "http://localhost";
    public static string ODataBaseUrl = "/odata";

    public ShiftFormBasicTests()
    {
        var mock = Services.AddMockHttpClient();
        mock.When(ODataBaseUrl + "/Product").RespondJson(new ODataResult<Sample>
        {
            value = Values,
        });
        Services.AddShiftServices(config =>
        {
            config.ODataEndpoint = BaseUrl + ODataBaseUrl;
            config.MudBlazorConfiguration = options =>
            {
                options.SnackbarConfiguration.ShowTransitionDuration = 0;
                options.SnackbarConfiguration.HideTransitionDuration = 0;
            };
        });

        JSInterop.Mode = JSRuntimeMode.Loose;

        for (var i = 0; i < 100; i++)
        {
            Values.Add(new Sample
            {
                Name = "Sample " + 1,
                ID = Guid.NewGuid(),
            });
        }
    }

    [Fact]
    public void ShouldRenderComponentCorrectly()
    {
        var cut = Render(@<ShiftFormBasic T="Sample"></ShiftFormBasic>);

        cut.FindComponent<EditForm>();
    }

    [Fact]
    public void ShouldRenderComponentCorrectly2()
    {
        var value = new Sample();

        var cut = Render(@<ShiftFormBasic Value="@value"></ShiftFormBasic>);

        cut.FindComponent<EditForm>();
    }


    [Fact]
    public void ShouldBeInCreateState()
    {
        var cut = RenderComponent<ShiftFormBasic<Sample>>();

        Assert.Equal(Utils.Form.States.Create, cut.Instance.State);
    }

    [Fact]
    public void ShouldRenderTitleCorrectly()
    {
        var title = "this is a form";

        var cut = Render(@<ShiftFormBasic T="Sample" Title="@title"></ShiftFormBasic>);
        
        var toolbar = cut.FindComponent<MudToolBar>();

        Assert.Contains(title, toolbar.Markup);
    }

    [Fact]
    public void ShouldRenderIconCorrectly()
    {
        var icon = Icons.Material.Filled.Abc;

        var cut = Render(@<ShiftFormBasic T="Sample" IconSvg="@icon"></ShiftFormBasic>);

        var toolbar = cut.FindComponent<MudToolBar>();

        Assert.Contains(icon, toolbar.Markup);
    }

    [Fact]
    public void ShouldAddValidatorAndDisableReflection()
    {
        var validator = new SampleValidator();
        var cut = Render(@<ShiftFormBasic T="Sample" Validator="@validator"></ShiftFormBasic>);

        var fluentValidator = cut.FindComponent<FluentValidationValidator>().Instance;

        Assert.NotNull(fluentValidator.Validator);
        Assert.True(fluentValidator.DisableAssemblyScanning);
    }

    [Fact]
    public void ShouldChangeStateOnValidSubmit()
    {
        var value = new Sample
        {
            Name = "Person",
            LastName = "Person Last Name",
        };

        var state = Utils.Form.States.Create;
        var isSaving = false;

        var cut = Render(@<ShiftFormBasic Value="@value" @bind-State="state" OnValidSubmit="@SubmitHandler"></ShiftFormBasic>);

        void SubmitHandler()
        {
            isSaving = Utils.Form.States.Saving == state;
        }

        cut.Find("footer button[type='submit']").Click();

        Assert.True(isSaving);
    }

    [Fact]
    public void ShouldRenderChildContentCorrectly()
    {
        var content = "<h1>Hello world</h1>";

        var cut = Render(@<ShiftFormBasic T="Sample">@content</ShiftFormBasic>);

        var body = cut.Find(".form-body");

        Assert.Contains(content, body.InnerHtml);
    }

    [Fact]
    public void ShouldUseFluentValidatorWhenValidatorParameterIsNotUsed()
    {
        var item = new Sample();
        var isInvalid = false;

        var cut = Render(@<ShiftFormBasic Value="@item" OnInvalidSubmit="SubmitHandler"></ShiftFormBasic>);

        void SubmitHandler()
        {
            isInvalid = true;
        }

        cut.Find("footer button[type='submit']").Click();

        Assert.True(isInvalid);
    }

    [Fact]
    public void ShouldNotRenderHeaderToolbar()
    {
        var cut = Render(@<ShiftFormBasic T="Sample" DisableHeaderToolbar></ShiftFormBasic>);


        Assert.Throws<Bunit.ElementNotFoundException>(() =>
        {
            cut.Find("header .mud-toolbar");
        });
    }

    [Fact]
    public void ShouldNotRenderFooterToolbar()
    {
        var cut = Render(@<ShiftFormBasic T="Sample" DisableFooterToolbar></ShiftFormBasic>);

        Assert.Throws<Bunit.ElementNotFoundException>(() =>
        {
            cut.Find("footer .mud-toolbar");
        });
    }
}